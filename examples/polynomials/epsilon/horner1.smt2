(define-fun epsilon () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 13.1072))
(define-fun const0 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun const1 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 6.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(declare-fun x () (_ FloatingPoint 8 24))
(assert (fp.isNormal x))
(define-fun arithexp10 () (_ FloatingPoint 8 24) (fp.mul RNE x x))
(assert (fp.isNormal arithexp10))
(define-fun arithexp9 () (_ FloatingPoint 8 24) (fp.mul RNE x arithexp10))
(assert (fp.isNormal arithexp9))
(define-fun arithexp8 () (_ FloatingPoint 8 24) (fp.mul RNE x arithexp9))
(assert (fp.isNormal arithexp8))
(define-fun arithexp7 () (_ FloatingPoint 8 24) (fp.mul RNE x arithexp8))
(assert (fp.isNormal arithexp7))
(define-fun arithexp6 () (_ FloatingPoint 8 24) (fp.mul RNE x arithexp7))
(assert (fp.isNormal arithexp6))
(define-fun arithexp5 () (_ FloatingPoint 8 24) (fp.mul RNE x arithexp6))
(assert (fp.isNormal arithexp5))
(define-fun arithexp3 () (_ FloatingPoint 8 24) (fp.mul RNE const1 arithexp5))
(assert (fp.isNormal arithexp3))
(define-fun const2 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 7.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun arithexp16 () (_ FloatingPoint 8 24) (fp.mul RNE x x))
(assert (fp.isNormal arithexp16))
(define-fun arithexp15 () (_ FloatingPoint 8 24) (fp.mul RNE x arithexp16))
(assert (fp.isNormal arithexp15))
(define-fun arithexp14 () (_ FloatingPoint 8 24) (fp.mul RNE x arithexp15))
(assert (fp.isNormal arithexp14))
(define-fun arithexp13 () (_ FloatingPoint 8 24) (fp.mul RNE x arithexp14))
(assert (fp.isNormal arithexp13))
(define-fun arithexp11 () (_ FloatingPoint 8 24) (fp.mul RNE const2 arithexp13))
(assert (fp.isNormal arithexp11))
(define-fun const3 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 2.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun arithexp21 () (_ FloatingPoint 8 24) (fp.mul RNE x x))
(assert (fp.isNormal arithexp21))
(define-fun arithexp20 () (_ FloatingPoint 8 24) (fp.mul RNE x arithexp21))
(assert (fp.isNormal arithexp20))
(define-fun arithexp19 () (_ FloatingPoint 8 24) (fp.mul RNE x arithexp20))
(assert (fp.isNormal arithexp19))
(define-fun arithexp17 () (_ FloatingPoint 8 24) (fp.mul RNE const3 arithexp19))
(assert (fp.isNormal arithexp17))
(define-fun const4 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 10.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun arithexp24 () (_ FloatingPoint 8 24) (fp.mul RNE x x))
(assert (fp.isNormal arithexp24))
(define-fun arithexp22 () (_ FloatingPoint 8 24) (fp.mul RNE const4 arithexp24))
(assert (fp.isNormal arithexp22))
(define-fun const5 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 6.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun const6 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 20.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun arithexp25 () (_ FloatingPoint 8 24) (fp.mul RNE const6 x))
(assert (fp.isNormal arithexp25))
(define-fun arithexp23 () (_ FloatingPoint 8 24) (fp.add RNE arithexp25 const5))
(assert (fp.isNormal arithexp23))
(define-fun arithexp18 () (_ FloatingPoint 8 24) (fp.add RNE arithexp22 arithexp23))
(assert (fp.isNormal arithexp18))
(define-fun arithexp12 () (_ FloatingPoint 8 24) (fp.add RNE arithexp17 arithexp18))
(assert (fp.isNormal arithexp12))
(define-fun arithexp4 () (_ FloatingPoint 8 24) (fp.add RNE arithexp11 arithexp12))
(assert (fp.isNormal arithexp4))
(define-fun arithexp1 () (_ FloatingPoint 8 24) (fp.add RNE arithexp3 arithexp4))
(assert (fp.isNormal arithexp1))
(define-fun const7 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 10.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun const8 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 7.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun arithexp38 () (_ FloatingPoint 8 24) (fp.mul RNE const1 x))
(assert (fp.isNormal arithexp38))
(define-fun arithexp37 () (_ FloatingPoint 8 24) (fp.add RNE arithexp38 const0))
(assert (fp.isNormal arithexp37))
(define-fun arithexp36 () (_ FloatingPoint 8 24) (fp.mul RNE arithexp37 x))
(assert (fp.isNormal arithexp36))
(define-fun arithexp35 () (_ FloatingPoint 8 24) (fp.sub RNE arithexp36 const8))
(assert (fp.isNormal arithexp35))
(define-fun arithexp34 () (_ FloatingPoint 8 24) (fp.mul RNE arithexp35 x))
(assert (fp.isNormal arithexp34))
(define-fun arithexp33 () (_ FloatingPoint 8 24) (fp.add RNE arithexp34 const3))
(assert (fp.isNormal arithexp33))
(define-fun arithexp32 () (_ FloatingPoint 8 24) (fp.mul RNE arithexp33 x))
(assert (fp.isNormal arithexp32))
(define-fun arithexp31 () (_ FloatingPoint 8 24) (fp.add RNE arithexp32 const0))
(assert (fp.isNormal arithexp31))
(define-fun arithexp30 () (_ FloatingPoint 8 24) (fp.mul RNE arithexp31 x))
(assert (fp.isNormal arithexp30))
(define-fun arithexp29 () (_ FloatingPoint 8 24) (fp.sub RNE arithexp30 const7))
(assert (fp.isNormal arithexp29))
(define-fun arithexp28 () (_ FloatingPoint 8 24) (fp.mul RNE arithexp29 x))
(assert (fp.isNormal arithexp28))
(define-fun arithexp27 () (_ FloatingPoint 8 24) (fp.add RNE arithexp28 const6))
(assert (fp.isNormal arithexp27))
(define-fun arithexp26 () (_ FloatingPoint 8 24) (fp.mul RNE arithexp27 x))
(assert (fp.isNormal arithexp26))
(define-fun arithexp2 () (_ FloatingPoint 8 24) (fp.sub RNE arithexp26 const1))
(assert (fp.isNormal arithexp2))
(define-fun arithexp () (_ FloatingPoint 8 24) (fp.sub RNE arithexp1 arithexp2))
(assert (fp.isNormal arithexp))
(define-fun prop () Bool (fp.gt arithexp epsilon))
(define-fun const9 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 100.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun prop1 () Bool (fp.geq x const9))
(define-fun const10 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 100.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun prop2 () Bool (fp.leq x const10))
(define-fun propexp1 () Bool (and prop1 prop2))
(define-fun propexp () Bool (and prop propexp1))
(assert propexp)
(check-sat)
;(get-model)
(exit)