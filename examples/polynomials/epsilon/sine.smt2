(define-fun epsilon () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.0001625))
(define-fun const0 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(declare-fun x () (_ FloatingPoint 8 24))
(assert (fp.isNormal x))
(define-fun const1 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 6.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun arithexp6 () (_ FloatingPoint 8 24) (fp.mul RNE x x))
(assert (fp.isNormal arithexp6))
(define-fun arithexp5 () (_ FloatingPoint 8 24) (fp.mul RNE x arithexp6))
(assert (fp.isNormal arithexp5))
(define-fun arithexp4 () (_ FloatingPoint 8 24) (fp.div RNE arithexp5 const1))
(assert (fp.isNormal arithexp4))
(define-fun arithexp2 () (_ FloatingPoint 8 24) (fp.sub RNE x arithexp4))
(assert (fp.isNormal arithexp2))
(define-fun const2 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 120.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun arithexp10 () (_ FloatingPoint 8 24) (fp.mul RNE x x))
(assert (fp.isNormal arithexp10))
(define-fun arithexp9 () (_ FloatingPoint 8 24) (fp.mul RNE x arithexp10))
(assert (fp.isNormal arithexp9))
(define-fun arithexp8 () (_ FloatingPoint 8 24) (fp.mul RNE x arithexp9))
(assert (fp.isNormal arithexp8))
(define-fun arithexp7 () (_ FloatingPoint 8 24) (fp.mul RNE x arithexp8))
(assert (fp.isNormal arithexp7))
(define-fun arithexp3 () (_ FloatingPoint 8 24) (fp.div RNE arithexp7 const2))
(assert (fp.isNormal arithexp3))
(define-fun arithexp1 () (_ FloatingPoint 8 24) (fp.add RNE arithexp2 arithexp3))
(assert (fp.isNormal arithexp1))
(define-fun arithexp () (_ FloatingPoint 8 24) (fp.sub RNE arithexp1 x))
(assert (fp.isNormal arithexp))
(define-fun prop () Bool (fp.gt arithexp epsilon))
(define-fun const3 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.100000001490116119384765625000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun prop1 () Bool (fp.geq x const3))
(define-fun const4 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.100000001490116119384765625000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun prop2 () Bool (fp.leq x const4))
(define-fun propexp1 () Bool (and prop1 prop2))
(define-fun propexp () Bool (and prop propexp1))
(assert propexp)
(check-sat)
;(get-model)
(exit)