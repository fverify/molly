(declare-fun x0 () (_ FloatingPoint 8 24))
(declare-fun x1 () (_ FloatingPoint 8 24))
(declare-fun x2 () (_ FloatingPoint 8 24))
(declare-fun x3 () (_ FloatingPoint 8 24))
(declare-fun x4 () (_ FloatingPoint 8 24))
(assert (let ((.def_16 (fp.leq x0 (fp #b0 #b10000010 #b01000000000000000000000))))
(let ((.def_15 (fp.leq (fp #b1 #b10000010 #b01000000000000000000000) x0)))
(let ((.def_17 (and .def_15 .def_16)))
.def_17))))
(assert (let ((.def_20 (fp.leq x1 (fp #b0 #b10000010 #b01000000000000000000000))))
(let ((.def_19 (fp.leq (fp #b1 #b10000010 #b01000000000000000000000) x1)))
(let ((.def_21 (and .def_19 .def_20)))
.def_21))))
(assert (let ((.def_24 (fp.leq x2 (fp #b0 #b10000010 #b01000000000000000000000))))
(let ((.def_23 (fp.leq (fp #b1 #b10000010 #b01000000000000000000000) x2)))
(let ((.def_25 (and .def_23 .def_24)))
.def_25))))
(assert (let ((.def_28 (fp.leq x3 (fp #b0 #b10000010 #b01000000000000000000000))))
(let ((.def_27 (fp.leq (fp #b1 #b10000010 #b01000000000000000000000) x3)))
(let ((.def_29 (and .def_27 .def_28)))
.def_29))))
(assert (let ((.def_32 (fp.leq x4 (fp #b0 #b10000010 #b01000000000000000000000))))
(let ((.def_31 (fp.leq (fp #b1 #b10000010 #b01000000000000000000000) x4)))
(let ((.def_33 (and .def_31 .def_32)))
.def_33))))
(assert (let ((.def_62 (fp.mul RNE x4 (fp #b1 #b01111110 #b10010110100001110010110))))
(let ((.def_57 (fp.mul RNE x3 (fp #b1 #b01111010 #b11110011101101100100011))))
(let ((.def_52 (fp.mul RNE x2 (fp #b1 #b01111110 #b11010001011010000111001))))
(let ((.def_47 (fp.mul RNE x1 (fp #b1 #b01111110 #b00110111010010111100011))))
(let ((.def_42 (fp.mul RNE x0 (fp #b0 #b01111100 #b11000010100011110101110))))
(let ((.def_43 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_42)))
(let ((.def_48 (fp.add RNE .def_43 .def_47)))
(let ((.def_53 (fp.add RNE .def_48 .def_52)))
(let ((.def_58 (fp.add RNE .def_53 .def_57)))
(let ((.def_63 (fp.add RNE .def_58 .def_62)))
(let ((.def_64 (fp.leq (fp #b0 #b01111110 #b01111010111000010100100) .def_63)))
.def_64))))))))))))
(assert (let ((.def_88 (fp.mul RNE x4 (fp #b0 #b01111101 #b00001100010010011011101))))
(let ((.def_84 (fp.mul RNE x3 (fp #b0 #b01111110 #b01110000101000111101100))))
(let ((.def_80 (fp.mul RNE x2 (fp #b1 #b01111110 #b00000110101001111111000))))
(let ((.def_75 (fp.mul RNE x1 (fp #b1 #b01111101 #b00001011010000111001011))))
(let ((.def_70 (fp.mul RNE x0 (fp #b0 #b01111110 #b00001001001101110100110))))
(let ((.def_71 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_70)))
(let ((.def_76 (fp.add RNE .def_71 .def_75)))
(let ((.def_81 (fp.add RNE .def_76 .def_80)))
(let ((.def_85 (fp.add RNE .def_81 .def_84)))
(let ((.def_89 (fp.add RNE .def_85 .def_88)))
(let ((.def_90 (fp.leq (fp #b1 #b01111110 #b00110001001001101110101) .def_89)))
.def_90))))))))))))
(assert (let ((.def_112 (fp.mul RNE x4 (fp #b0 #b01111101 #b10010000011000100100111))))
(let ((.def_108 (fp.mul RNE x3 (fp #b0 #b01111110 #b11010011011101001011110))))
(let ((.def_104 (fp.mul RNE x2 (fp #b0 #b01111110 #b10010110000001000001100))))
(let ((.def_100 (fp.mul RNE x1 (fp #b0 #b01111110 #b00011110101110000101001))))
(let ((.def_96 (fp.mul RNE x0 (fp #b1 #b01111110 #b11101101000011100101011))))
(let ((.def_97 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_96)))
(let ((.def_101 (fp.add RNE .def_97 .def_100)))
(let ((.def_105 (fp.add RNE .def_101 .def_104)))
(let ((.def_109 (fp.add RNE .def_105 .def_108)))
(let ((.def_113 (fp.add RNE .def_109 .def_112)))
(let ((.def_114 (fp.leq .def_113 (fp #b0 #b01111101 #b11100011010100111111100))))
.def_114))))))))))))
(assert (let ((.def_136 (fp.mul RNE x4 (fp #b0 #b01111110 #b01110110110010001011010))))
(let ((.def_132 (fp.mul RNE x3 (fp #b0 #b01111100 #b10010011011101001011110))))
(let ((.def_128 (fp.mul RNE x2 (fp #b1 #b01111101 #b00011100101011000000100))))
(let ((.def_123 (fp.mul RNE x1 (fp #b0 #b01111101 #b00011000100100110111010))))
(let ((.def_119 (fp.mul RNE x0 (fp #b0 #b01111110 #b00001101010011111110000))))
(let ((.def_120 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_119)))
(let ((.def_124 (fp.add RNE .def_120 .def_123)))
(let ((.def_129 (fp.add RNE .def_124 .def_128)))
(let ((.def_133 (fp.add RNE .def_129 .def_132)))
(let ((.def_137 (fp.add RNE .def_133 .def_136)))
(let ((.def_138 (fp.leq .def_137 (fp #b0 #b01111010 #b11011011001000101101000))))
.def_138))))))))))))
(assert (let ((.def_158 (fp.mul RNE x4 (fp #b0 #b01111101 #b01110111110011101101101))))
(let ((.def_154 (fp.mul RNE x3 (fp #b0 #b01111100 #b11010010111100011010101))))
(let ((.def_150 (fp.mul RNE x2 (fp #b0 #b01111110 #b00111101111100111011011))))
(let ((.def_146 (fp.mul RNE x1 (fp #b0 #b01111101 #b11101000011100101011000))))
(let ((.def_142 (fp.mul RNE x0 (fp #b1 #b01111101 #b01100100010110100001110))))
(let ((.def_143 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_142)))
(let ((.def_147 (fp.add RNE .def_143 .def_146)))
(let ((.def_151 (fp.add RNE .def_147 .def_150)))
(let ((.def_155 (fp.add RNE .def_151 .def_154)))
(let ((.def_159 (fp.add RNE .def_155 .def_158)))
(let ((.def_160 (fp.leq .def_159 (fp #b0 #b01111110 #b11101101000011100101011))))
.def_160))))))))))))
(check-sat)
