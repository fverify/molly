(declare-fun x0 () (_ FloatingPoint 8 24))
(declare-fun x1 () (_ FloatingPoint 8 24))
(declare-fun x2 () (_ FloatingPoint 8 24))
(assert (let ((.def_16 (fp.leq x0 (fp #b0 #b10000010 #b01000000000000000000000))))
(let ((.def_15 (fp.leq (fp #b1 #b10000010 #b01000000000000000000000) x0)))
(let ((.def_17 (and .def_15 .def_16)))
.def_17))))
(assert (let ((.def_20 (fp.leq x1 (fp #b0 #b10000010 #b01000000000000000000000))))
(let ((.def_19 (fp.leq (fp #b1 #b10000010 #b01000000000000000000000) x1)))
(let ((.def_21 (and .def_19 .def_20)))
.def_21))))
(assert (let ((.def_24 (fp.leq x2 (fp #b0 #b10000010 #b01000000000000000000000))))
(let ((.def_23 (fp.leq (fp #b1 #b10000010 #b01000000000000000000000) x2)))
(let ((.def_25 (and .def_23 .def_24)))
.def_25))))
(assert (let ((.def_44 (fp.mul RNE x2 (fp #b1 #b01111101 #b00110011001100110011010))))
(let ((.def_39 (fp.mul RNE x1 (fp #b1 #b01111110 #b01111000010100011110110))))
(let ((.def_34 (fp.mul RNE x0 (fp #b0 #b01111011 #b01010011111101111100111))))
(let ((.def_35 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_34)))
(let ((.def_40 (fp.add RNE .def_35 .def_39)))
(let ((.def_45 (fp.add RNE .def_40 .def_44)))
(let ((.def_46 (fp.leq .def_45 (fp #b0 #b01111110 #b11100000010000011000101))))
.def_46))))))))
(assert (let ((.def_62 (fp.mul RNE x2 (fp #b1 #b01111101 #b01001000101101000011101))))
(let ((.def_57 (fp.mul RNE x1 (fp #b1 #b01111110 #b11101100100010110100010))))
(let ((.def_52 (fp.mul RNE x0 (fp #b0 #b01111101 #b01011000000100000110001))))
(let ((.def_53 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_52)))
(let ((.def_58 (fp.add RNE .def_53 .def_57)))
(let ((.def_63 (fp.add RNE .def_58 .def_62)))
(let ((.def_64 (fp.leq (fp #b1 #b01111110 #b00011101101100100010111) .def_63)))
.def_64))))))))
(assert (let ((.def_77 (fp.mul RNE x2 (fp #b0 #b01111100 #b01100000010000011000101))))
(let ((.def_73 (fp.mul RNE x1 (fp #b0 #b01111110 #b10010111100011010101000))))
(let ((.def_69 (fp.mul RNE x0 (fp #b0 #b01111110 #b00110010001011010000111))))
(let ((.def_70 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_69)))
(let ((.def_74 (fp.add RNE .def_70 .def_73)))
(let ((.def_78 (fp.add RNE .def_74 .def_77)))
(let ((.def_79 (fp.leq (fp #b0 #b01111110 #b01000110101001111111000) .def_78)))
.def_79))))))))
(assert (let ((.def_93 (fp.mul RNE x2 (fp #b0 #b01111110 #b00111001110110110010001))))
(let ((.def_89 (fp.mul RNE x1 (fp #b1 #b01111101 #b00101111000110101010000))))
(let ((.def_84 (fp.mul RNE x0 (fp #b0 #b01111110 #b11101001011110001101010))))
(let ((.def_85 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_84)))
(let ((.def_90 (fp.add RNE .def_85 .def_89)))
(let ((.def_94 (fp.add RNE .def_90 .def_93)))
(let ((.def_95 (fp.leq .def_94 (fp #b0 #b01111110 #b11110011001100110011010))))
.def_95))))))))
(assert (let ((.def_111 (fp.mul RNE x2 (fp #b0 #b01111110 #b11000111101011100001010))))
(let ((.def_107 (fp.mul RNE x1 (fp #b1 #b01111110 #b10100111111011111001111))))
(let ((.def_102 (fp.mul RNE x0 (fp #b1 #b01111101 #b10000100000110001001010))))
(let ((.def_103 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_102)))
(let ((.def_108 (fp.add RNE .def_103 .def_107)))
(let ((.def_112 (fp.add RNE .def_108 .def_111)))
(let ((.def_113 (fp.leq (fp #b1 #b01111110 #b10100100110111010011000) .def_112)))
.def_113))))))))
(assert (let ((.def_127 (fp.mul RNE x2 (fp #b1 #b01111110 #b01010010011011101001100))))
(let ((.def_122 (fp.mul RNE x1 (fp #b0 #b01111110 #b10000110001001001101111))))
(let ((.def_118 (fp.mul RNE x0 (fp #b0 #b01111011 #b10001001001101110100110))))
(let ((.def_119 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_118)))
(let ((.def_123 (fp.add RNE .def_119 .def_122)))
(let ((.def_128 (fp.add RNE .def_123 .def_127)))
(let ((.def_129 (fp.leq (fp #b0 #b01111110 #b00010010011011101001100) .def_128)))
.def_129))))))))
(assert (let ((.def_144 (fp.mul RNE x2 (fp #b1 #b01111110 #b01110011001100110011010))))
(let ((.def_139 (fp.mul RNE x1 (fp #b0 #b01111011 #b10111110011101101100100))))
(let ((.def_135 (fp.mul RNE x0 (fp #b0 #b01111101 #b01101101100100010110100))))
(let ((.def_136 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_135)))
(let ((.def_140 (fp.add RNE .def_136 .def_139)))
(let ((.def_145 (fp.add RNE .def_140 .def_144)))
(let ((.def_146 (fp.leq (fp #b1 #b01111110 #b10011001100110011001101) .def_145)))
.def_146))))))))
(assert (let ((.def_161 (fp.mul RNE x2 (fp #b1 #b01111101 #b10000101000111101011100))))
(let ((.def_156 (fp.mul RNE x1 (fp #b0 #b01111100 #b11101101100100010110100))))
(let ((.def_152 (fp.mul RNE x0 (fp #b0 #b01111100 #b10011001100110011001101))))
(let ((.def_153 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_152)))
(let ((.def_157 (fp.add RNE .def_153 .def_156)))
(let ((.def_162 (fp.add RNE .def_157 .def_161)))
(let ((.def_163 (fp.leq (fp #b1 #b01111110 #b11111100111011011001001) .def_162)))
.def_163))))))))
(check-sat)
