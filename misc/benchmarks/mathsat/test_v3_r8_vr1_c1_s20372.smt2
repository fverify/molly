(declare-fun x0 () (_ FloatingPoint 8 24))
(declare-fun x1 () (_ FloatingPoint 8 24))
(declare-fun x2 () (_ FloatingPoint 8 24))
(assert (let ((.def_16 (fp.leq x0 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_15 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x0)))
(let ((.def_17 (and .def_15 .def_16)))
.def_17))))
(assert (let ((.def_20 (fp.leq x1 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_19 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x1)))
(let ((.def_21 (and .def_19 .def_20)))
.def_21))))
(assert (let ((.def_24 (fp.leq x2 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_23 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x2)))
(let ((.def_25 (and .def_23 .def_24)))
.def_25))))
(assert (let ((.def_44 (fp.mul RNE x2 (fp #b0 #b01111110 #b11000101101000011100101))))
(let ((.def_40 (fp.mul RNE x1 (fp #b1 #b01111001 #b11111011111001110110110))))
(let ((.def_35 (fp.mul RNE x0 (fp #b0 #b01111110 #b11110011001100110011010))))
(let ((.def_36 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_35)))
(let ((.def_41 (fp.add RNE .def_36 .def_40)))
(let ((.def_45 (fp.add RNE .def_41 .def_44)))
(let ((.def_46 (fp.leq (fp #b1 #b01111100 #b10110110010001011010001) .def_45)))
.def_46))))))))
(assert (let ((.def_61 (fp.mul RNE x2 (fp #b0 #b01111110 #b10110110010001011010001))))
(let ((.def_57 (fp.mul RNE x1 (fp #b1 #b01111110 #b00001101010011111110000))))
(let ((.def_52 (fp.mul RNE x0 (fp #b0 #b01111110 #b10111100111011011001001))))
(let ((.def_53 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_52)))
(let ((.def_58 (fp.add RNE .def_53 .def_57)))
(let ((.def_62 (fp.add RNE .def_58 .def_61)))
(let ((.def_63 (fp.leq .def_62 (fp #b1 #b01111110 #b00010011011101001011110))))
.def_63))))))))
(assert (let ((.def_78 (fp.mul RNE x2 (fp #b1 #b01111101 #b01110100101111000110101))))
(let ((.def_73 (fp.mul RNE x1 (fp #b1 #b01111100 #b11001010110000001000010))))
(let ((.def_68 (fp.mul RNE x0 (fp #b0 #b01111110 #b11100100010110100001110))))
(let ((.def_69 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_68)))
(let ((.def_74 (fp.add RNE .def_69 .def_73)))
(let ((.def_79 (fp.add RNE .def_74 .def_78)))
(let ((.def_80 (fp.leq (fp #b0 #b01111110 #b01110011001100110011010) .def_79)))
.def_80))))))))
(assert (let ((.def_94 (fp.mul RNE x2 (fp #b0 #b01111110 #b11010000111001010110000))))
(let ((.def_90 (fp.mul RNE x1 (fp #b0 #b01111110 #b01000001100010010011100))))
(let ((.def_86 (fp.mul RNE x0 (fp #b1 #b01111101 #b00010000011000100100111))))
(let ((.def_87 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_86)))
(let ((.def_91 (fp.add RNE .def_87 .def_90)))
(let ((.def_95 (fp.add RNE .def_91 .def_94)))
(let ((.def_96 (fp.leq (fp #b0 #b01111100 #b11000010100011110101110) .def_95)))
.def_96))))))))
(assert (let ((.def_110 (fp.mul RNE x2 (fp #b0 #b01111100 #b01110110110010001011010))))
(let ((.def_106 (fp.mul RNE x1 (fp #b0 #b01111101 #b10011000100100110111010))))
(let ((.def_102 (fp.mul RNE x0 (fp #b0 #b01111100 #b11101111100111011011001))))
(let ((.def_103 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_102)))
(let ((.def_107 (fp.add RNE .def_103 .def_106)))
(let ((.def_111 (fp.add RNE .def_107 .def_110)))
(let ((.def_112 (fp.leq (fp #b1 #b01111110 #b01101100000010000011001) .def_111)))
.def_112))))))))
(assert (let ((.def_127 (fp.mul RNE x2 (fp #b0 #b01111101 #b00111110011101101100100))))
(let ((.def_123 (fp.mul RNE x1 (fp #b0 #b01111100 #b10011001100110011001101))))
(let ((.def_119 (fp.mul RNE x0 (fp #b1 #b01111110 #b00000100000110001001010))))
(let ((.def_120 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_119)))
(let ((.def_124 (fp.add RNE .def_120 .def_123)))
(let ((.def_128 (fp.add RNE .def_124 .def_127)))
(let ((.def_129 (fp.leq (fp #b1 #b01111110 #b00100000010000011000101) .def_128)))
.def_129))))))))
(assert (let ((.def_145 (fp.mul RNE x2 (fp #b0 #b01111110 #b10111001010110000001000))))
(let ((.def_141 (fp.mul RNE x1 (fp #b1 #b01111110 #b01111101111100111011011))))
(let ((.def_136 (fp.mul RNE x0 (fp #b1 #b01111001 #b01111000110101001111111))))
(let ((.def_137 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_136)))
(let ((.def_142 (fp.add RNE .def_137 .def_141)))
(let ((.def_146 (fp.add RNE .def_142 .def_145)))
(let ((.def_147 (fp.leq .def_146 (fp #b1 #b01111100 #b10000011000100100110111))))
.def_147))))))))
(assert (let ((.def_162 (fp.mul RNE x2 (fp #b0 #b01111101 #b00111000010100011110110))))
(let ((.def_158 (fp.mul RNE x1 (fp #b0 #b01111110 #b11000100100110111010011))))
(let ((.def_154 (fp.mul RNE x0 (fp #b1 #b01111101 #b11010011111101111100111))))
(let ((.def_155 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_154)))
(let ((.def_159 (fp.add RNE .def_155 .def_158)))
(let ((.def_163 (fp.add RNE .def_159 .def_162)))
(let ((.def_164 (fp.leq .def_163 (fp #b1 #b01111110 #b11010111000010100011111))))
.def_164))))))))
(check-sat)
