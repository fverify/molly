(declare-fun x0 () (_ FloatingPoint 8 24))
(declare-fun x1 () (_ FloatingPoint 8 24))
(declare-fun x2 () (_ FloatingPoint 8 24))
(declare-fun x3 () (_ FloatingPoint 8 24))
(declare-fun x4 () (_ FloatingPoint 8 24))
(assert (let ((.def_16 (fp.leq x0 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_15 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x0)))
(let ((.def_17 (and .def_15 .def_16)))
.def_17))))
(assert (let ((.def_20 (fp.leq x1 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_19 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x1)))
(let ((.def_21 (and .def_19 .def_20)))
.def_21))))
(assert (let ((.def_24 (fp.leq x2 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_23 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x2)))
(let ((.def_25 (and .def_23 .def_24)))
.def_25))))
(assert (let ((.def_28 (fp.leq x3 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_27 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x3)))
(let ((.def_29 (and .def_27 .def_28)))
.def_29))))
(assert (let ((.def_32 (fp.leq x4 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_31 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x4)))
(let ((.def_33 (and .def_31 .def_32)))
.def_33))))
(assert (let ((.def_59 (fp.mul RNE x4 (fp #b0 #b01111110 #b00100110111010010111100))))
(let ((.def_55 (fp.mul RNE x3 (fp #b0 #b01111101 #b01101010011111101111101))))
(let ((.def_51 (fp.mul RNE x2 (fp #b0 #b01111110 #b10001101010011111110000))))
(let ((.def_47 (fp.mul RNE x1 (fp #b0 #b01111110 #b10101001011110001101010))))
(let ((.def_43 (fp.mul RNE x0 (fp #b1 #b01111101 #b01011111001110110110010))))
(let ((.def_44 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_43)))
(let ((.def_48 (fp.add RNE .def_44 .def_47)))
(let ((.def_52 (fp.add RNE .def_48 .def_51)))
(let ((.def_56 (fp.add RNE .def_52 .def_55)))
(let ((.def_60 (fp.add RNE .def_56 .def_59)))
(let ((.def_61 (fp.leq .def_60 (fp #b0 #b01111110 #b10100101111000110101010))))
.def_61))))))))))))
(assert (let ((.def_86 (fp.mul RNE x4 (fp #b1 #b01111100 #b01110110110010001011010))))
(let ((.def_81 (fp.mul RNE x3 (fp #b1 #b01111110 #b10100101011000000100001))))
(let ((.def_76 (fp.mul RNE x2 (fp #b1 #b01111110 #b00001001001101110100110))))
(let ((.def_71 (fp.mul RNE x1 (fp #b0 #b01111010 #b01101000011100101011000))))
(let ((.def_67 (fp.mul RNE x0 (fp #b1 #b01111110 #b10110000001000001100010))))
(let ((.def_68 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_67)))
(let ((.def_72 (fp.add RNE .def_68 .def_71)))
(let ((.def_77 (fp.add RNE .def_72 .def_76)))
(let ((.def_82 (fp.add RNE .def_77 .def_81)))
(let ((.def_87 (fp.add RNE .def_82 .def_86)))
(let ((.def_88 (fp.leq (fp #b0 #b01111011 #b10100101111000110101010) .def_87)))
.def_88))))))))))))
(assert (let ((.def_110 (fp.mul RNE x4 (fp #b0 #b01111011 #b11000010100011110101110))))
(let ((.def_106 (fp.mul RNE x3 (fp #b1 #b01111001 #b01101000011100101011000))))
(let ((.def_101 (fp.mul RNE x2 (fp #b0 #b01111011 #b00000110001001001101111))))
(let ((.def_97 (fp.mul RNE x1 (fp #b0 #b01111101 #b01000111101011100001010))))
(let ((.def_93 (fp.mul RNE x0 (fp #b0 #b01111110 #b00011010100111111011111))))
(let ((.def_94 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_93)))
(let ((.def_98 (fp.add RNE .def_94 .def_97)))
(let ((.def_102 (fp.add RNE .def_98 .def_101)))
(let ((.def_107 (fp.add RNE .def_102 .def_106)))
(let ((.def_111 (fp.add RNE .def_107 .def_110)))
(let ((.def_112 (fp.leq (fp #b0 #b01111110 #b00000101000111101011100) .def_111)))
.def_112))))))))))))
(assert (let ((.def_137 (fp.mul RNE x4 (fp #b1 #b01111110 #b10100111011011001000110))))
(let ((.def_132 (fp.mul RNE x3 (fp #b0 #b01111110 #b01001110010101100000010))))
(let ((.def_128 (fp.mul RNE x2 (fp #b1 #b01111110 #b00111001010110000001000))))
(let ((.def_123 (fp.mul RNE x1 (fp #b1 #b01111110 #b11111100011010100111111))))
(let ((.def_118 (fp.mul RNE x0 (fp #b1 #b01111100 #b01101100100010110100010))))
(let ((.def_119 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_118)))
(let ((.def_124 (fp.add RNE .def_119 .def_123)))
(let ((.def_129 (fp.add RNE .def_124 .def_128)))
(let ((.def_133 (fp.add RNE .def_129 .def_132)))
(let ((.def_138 (fp.add RNE .def_133 .def_137)))
(let ((.def_139 (fp.leq .def_138 (fp #b0 #b01111100 #b10000001000001100010010))))
.def_139))))))))))))
(assert (let ((.def_162 (fp.mul RNE x4 (fp #b0 #b01111110 #b01100100010110100001110))))
(let ((.def_158 (fp.mul RNE x3 (fp #b1 #b01111110 #b10100000110001001001110))))
(let ((.def_153 (fp.mul RNE x2 (fp #b0 #b01111101 #b11010011111101111100111))))
(let ((.def_149 (fp.mul RNE x1 (fp #b0 #b01111011 #b10000001000001100010010))))
(let ((.def_145 (fp.mul RNE x0 (fp #b1 #b01111101 #b00001010001111010111000))))
(let ((.def_146 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_145)))
(let ((.def_150 (fp.add RNE .def_146 .def_149)))
(let ((.def_154 (fp.add RNE .def_150 .def_153)))
(let ((.def_159 (fp.add RNE .def_154 .def_158)))
(let ((.def_163 (fp.add RNE .def_159 .def_162)))
(let ((.def_164 (fp.leq (fp #b0 #b01111101 #b00100001110010101100000) .def_163)))
.def_164))))))))))))
(check-sat)
