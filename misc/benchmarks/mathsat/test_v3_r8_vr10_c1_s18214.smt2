(declare-fun x0 () (_ FloatingPoint 8 24))
(declare-fun x1 () (_ FloatingPoint 8 24))
(declare-fun x2 () (_ FloatingPoint 8 24))
(assert (let ((.def_16 (fp.leq x0 (fp #b0 #b10000010 #b01000000000000000000000))))
(let ((.def_15 (fp.leq (fp #b1 #b10000010 #b01000000000000000000000) x0)))
(let ((.def_17 (and .def_15 .def_16)))
.def_17))))
(assert (let ((.def_20 (fp.leq x1 (fp #b0 #b10000010 #b01000000000000000000000))))
(let ((.def_19 (fp.leq (fp #b1 #b10000010 #b01000000000000000000000) x1)))
(let ((.def_21 (and .def_19 .def_20)))
.def_21))))
(assert (let ((.def_24 (fp.leq x2 (fp #b0 #b10000010 #b01000000000000000000000))))
(let ((.def_23 (fp.leq (fp #b1 #b10000010 #b01000000000000000000000) x2)))
(let ((.def_25 (and .def_23 .def_24)))
.def_25))))
(assert (let ((.def_42 (fp.mul RNE x2 (fp #b0 #b01111100 #b01101000011100101011000))))
(let ((.def_38 (fp.mul RNE x1 (fp #b0 #b01111100 #b11101011100001010001111))))
(let ((.def_34 (fp.mul RNE x0 (fp #b0 #b01111101 #b11010100111111011111010))))
(let ((.def_35 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_34)))
(let ((.def_39 (fp.add RNE .def_35 .def_38)))
(let ((.def_43 (fp.add RNE .def_39 .def_42)))
(let ((.def_44 (fp.leq (fp #b0 #b01111100 #b00101000111101011100001) .def_43)))
.def_44))))))))
(assert (let ((.def_59 (fp.mul RNE x2 (fp #b1 #b01111101 #b10100110111010010111100))))
(let ((.def_54 (fp.mul RNE x1 (fp #b1 #b01111110 #b01100011010100111111100))))
(let ((.def_49 (fp.mul RNE x0 (fp #b0 #b01111110 #b00100000110001001001110))))
(let ((.def_50 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_49)))
(let ((.def_55 (fp.add RNE .def_50 .def_54)))
(let ((.def_60 (fp.add RNE .def_55 .def_59)))
(let ((.def_61 (fp.leq .def_60 (fp #b0 #b01111100 #b01100110011001100110011))))
.def_61))))))))
(assert (let ((.def_76 (fp.mul RNE x2 (fp #b1 #b01111110 #b11101111100111011011001))))
(let ((.def_71 (fp.mul RNE x1 (fp #b0 #b01111101 #b10010001011010000111001))))
(let ((.def_67 (fp.mul RNE x0 (fp #b1 #b01111110 #b01000110001001001101111))))
(let ((.def_68 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_67)))
(let ((.def_72 (fp.add RNE .def_68 .def_71)))
(let ((.def_77 (fp.add RNE .def_72 .def_76)))
(let ((.def_78 (fp.leq (fp #b0 #b01111110 #b00011000100100110111010) .def_77)))
.def_78))))))))
(assert (let ((.def_93 (fp.mul RNE x2 (fp #b1 #b01111110 #b11000010000011000100101))))
(let ((.def_88 (fp.mul RNE x1 (fp #b0 #b01111100 #b11000010100011110101110))))
(let ((.def_84 (fp.mul RNE x0 (fp #b0 #b01111110 #b11000000100000110001001))))
(let ((.def_85 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_84)))
(let ((.def_89 (fp.add RNE .def_85 .def_88)))
(let ((.def_94 (fp.add RNE .def_89 .def_93)))
(let ((.def_95 (fp.leq .def_94 (fp #b1 #b01111011 #b10010001011010000111001))))
.def_95))))))))
(assert (let ((.def_109 (fp.mul RNE x2 (fp #b0 #b01111100 #b01101010011111101111101))))
(let ((.def_105 (fp.mul RNE x1 (fp #b0 #b01111110 #b11100000010000011000101))))
(let ((.def_101 (fp.mul RNE x0 (fp #b0 #b01111101 #b10010000011000100100111))))
(let ((.def_102 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_101)))
(let ((.def_106 (fp.add RNE .def_102 .def_105)))
(let ((.def_110 (fp.add RNE .def_106 .def_109)))
(let ((.def_111 (fp.leq (fp #b1 #b01111010 #b01000111101011100001010) .def_110)))
.def_111))))))))
(assert (let ((.def_125 (fp.mul RNE x2 (fp #b1 #b01111110 #b00111101111100111011011))))
(let ((.def_120 (fp.mul RNE x1 (fp #b0 #b01111110 #b01011001100110011001101))))
(let ((.def_116 (fp.mul RNE x0 (fp #b0 #b01111101 #b00001100010010011011101))))
(let ((.def_117 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_116)))
(let ((.def_121 (fp.add RNE .def_117 .def_120)))
(let ((.def_126 (fp.add RNE .def_121 .def_125)))
(let ((.def_127 (fp.leq (fp #b0 #b01111100 #b11100001010001111010111) .def_126)))
.def_127))))))))
(assert (let ((.def_143 (fp.mul RNE x2 (fp #b0 #b01111100 #b00110001001001101110101))))
(let ((.def_139 (fp.mul RNE x1 (fp #b1 #b01111110 #b00001001001101110100110))))
(let ((.def_134 (fp.mul RNE x0 (fp #b1 #b01111101 #b10000001000001100010010))))
(let ((.def_135 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_134)))
(let ((.def_140 (fp.add RNE .def_135 .def_139)))
(let ((.def_144 (fp.add RNE .def_140 .def_143)))
(let ((.def_145 (fp.leq .def_144 (fp #b1 #b01111001 #b01101000011100101011000))))
.def_145))))))))
(assert (let ((.def_161 (fp.mul RNE x2 (fp #b1 #b01111110 #b00011010100111111011111))))
(let ((.def_156 (fp.mul RNE x1 (fp #b0 #b01111101 #b00001110010101100000010))))
(let ((.def_152 (fp.mul RNE x0 (fp #b1 #b01111110 #b01010110000001000001100))))
(let ((.def_153 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_152)))
(let ((.def_157 (fp.add RNE .def_153 .def_156)))
(let ((.def_162 (fp.add RNE .def_157 .def_161)))
(let ((.def_163 (fp.leq .def_162 (fp #b1 #b01111010 #b10010001011010000111001))))
.def_163))))))))
(check-sat)
