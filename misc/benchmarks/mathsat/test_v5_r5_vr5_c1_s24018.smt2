(declare-fun x0 () (_ FloatingPoint 8 24))
(declare-fun x1 () (_ FloatingPoint 8 24))
(declare-fun x2 () (_ FloatingPoint 8 24))
(declare-fun x3 () (_ FloatingPoint 8 24))
(declare-fun x4 () (_ FloatingPoint 8 24))
(assert (let ((.def_16 (fp.leq x0 (fp #b0 #b10000001 #b01000000000000000000000))))
(let ((.def_15 (fp.leq (fp #b1 #b10000001 #b01000000000000000000000) x0)))
(let ((.def_17 (and .def_15 .def_16)))
.def_17))))
(assert (let ((.def_20 (fp.leq x1 (fp #b0 #b10000001 #b01000000000000000000000))))
(let ((.def_19 (fp.leq (fp #b1 #b10000001 #b01000000000000000000000) x1)))
(let ((.def_21 (and .def_19 .def_20)))
.def_21))))
(assert (let ((.def_24 (fp.leq x2 (fp #b0 #b10000001 #b01000000000000000000000))))
(let ((.def_23 (fp.leq (fp #b1 #b10000001 #b01000000000000000000000) x2)))
(let ((.def_25 (and .def_23 .def_24)))
.def_25))))
(assert (let ((.def_28 (fp.leq x3 (fp #b0 #b10000001 #b01000000000000000000000))))
(let ((.def_27 (fp.leq (fp #b1 #b10000001 #b01000000000000000000000) x3)))
(let ((.def_29 (and .def_27 .def_28)))
.def_29))))
(assert (let ((.def_32 (fp.leq x4 (fp #b0 #b10000001 #b01000000000000000000000))))
(let ((.def_31 (fp.leq (fp #b1 #b10000001 #b01000000000000000000000) x4)))
(let ((.def_33 (and .def_31 .def_32)))
.def_33))))
(assert (let ((.def_60 (fp.mul RNE x4 (fp #b0 #b01111101 #b00011001100110011001101))))
(let ((.def_56 (fp.mul RNE x3 (fp #b0 #b01111101 #b10111110011101101100100))))
(let ((.def_52 (fp.mul RNE x2 (fp #b0 #b01111110 #b00100100010110100001110))))
(let ((.def_48 (fp.mul RNE x1 (fp #b0 #b01111110 #b01011010000111001010110))))
(let ((.def_44 (fp.mul RNE x0 (fp #b1 #b01111110 #b01010110000001000001100))))
(let ((.def_45 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_44)))
(let ((.def_49 (fp.add RNE .def_45 .def_48)))
(let ((.def_53 (fp.add RNE .def_49 .def_52)))
(let ((.def_57 (fp.add RNE .def_53 .def_56)))
(let ((.def_61 (fp.add RNE .def_57 .def_60)))
(let ((.def_62 (fp.leq .def_61 (fp #b1 #b01111110 #b11100000110001001001110))))
.def_62))))))))))))
(assert (let ((.def_89 (fp.mul RNE x4 (fp #b1 #b01111110 #b11010110100001110010110))))
(let ((.def_84 (fp.mul RNE x3 (fp #b1 #b01111110 #b10101110100101111000111))))
(let ((.def_79 (fp.mul RNE x2 (fp #b1 #b01111110 #b11000100000110001001010))))
(let ((.def_74 (fp.mul RNE x1 (fp #b1 #b01111000 #b00000110001001001101111))))
(let ((.def_69 (fp.mul RNE x0 (fp #b1 #b01111110 #b01000110001001001101111))))
(let ((.def_70 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_69)))
(let ((.def_75 (fp.add RNE .def_70 .def_74)))
(let ((.def_80 (fp.add RNE .def_75 .def_79)))
(let ((.def_85 (fp.add RNE .def_80 .def_84)))
(let ((.def_90 (fp.add RNE .def_85 .def_89)))
(let ((.def_91 (fp.leq .def_90 (fp #b1 #b01111000 #b01000111101011100001010))))
.def_91))))))))))))
(assert (let ((.def_113 (fp.mul RNE x4 (fp #b1 #b01111101 #b00011001100110011001101))))
(let ((.def_110 (fp.mul RNE x3 (fp #b0 #b01111110 #b00101101100100010110100))))
(let ((.def_106 (fp.mul RNE x2 (fp #b0 #b01111110 #b10010110100001110010110))))
(let ((.def_102 (fp.mul RNE x1 (fp #b0 #b01111010 #b00000110001001001101111))))
(let ((.def_98 (fp.mul RNE x0 (fp #b1 #b01111110 #b00101000011100101011000))))
(let ((.def_99 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_98)))
(let ((.def_103 (fp.add RNE .def_99 .def_102)))
(let ((.def_107 (fp.add RNE .def_103 .def_106)))
(let ((.def_111 (fp.add RNE .def_107 .def_110)))
(let ((.def_114 (fp.add RNE .def_111 .def_113)))
(let ((.def_115 (fp.leq (fp #b1 #b01111110 #b11011001100110011001101) .def_114)))
.def_115))))))))))))
(assert (let ((.def_140 (fp.mul RNE x4 (fp #b0 #b01111110 #b01101101000011100101011))))
(let ((.def_136 (fp.mul RNE x3 (fp #b1 #b01111110 #b01110100101111000110101))))
(let ((.def_131 (fp.mul RNE x2 (fp #b1 #b01111101 #b01100111011011001000110))))
(let ((.def_126 (fp.mul RNE x1 (fp #b1 #b01111100 #b00110001001001101110101))))
(let ((.def_121 (fp.mul RNE x0 (fp #b1 #b01111110 #b01011110101110000101001))))
(let ((.def_122 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_121)))
(let ((.def_127 (fp.add RNE .def_122 .def_126)))
(let ((.def_132 (fp.add RNE .def_127 .def_131)))
(let ((.def_137 (fp.add RNE .def_132 .def_136)))
(let ((.def_141 (fp.add RNE .def_137 .def_140)))
(let ((.def_142 (fp.leq (fp #b0 #b01111101 #b11000100100110111010011) .def_141)))
.def_142))))))))))))
(assert (let ((.def_167 (fp.mul RNE x4 (fp #b1 #b01111100 #b00000110001001001101111))))
(let ((.def_162 (fp.mul RNE x3 (fp #b0 #b01111110 #b11011011101001011110010))))
(let ((.def_158 (fp.mul RNE x2 (fp #b1 #b01111100 #b01001011110001101010100))))
(let ((.def_153 (fp.mul RNE x1 (fp #b1 #b01111010 #b00011110101110000101001))))
(let ((.def_148 (fp.mul RNE x0 (fp #b0 #b01111110 #b00101001111110111110100))))
(let ((.def_149 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_148)))
(let ((.def_154 (fp.add RNE .def_149 .def_153)))
(let ((.def_159 (fp.add RNE .def_154 .def_158)))
(let ((.def_163 (fp.add RNE .def_159 .def_162)))
(let ((.def_168 (fp.add RNE .def_163 .def_167)))
(let ((.def_169 (fp.leq .def_168 (fp #b1 #b01111100 #b11100001010001111010111))))
.def_169))))))))))))
(check-sat)
