(declare-fun x0 () (_ FloatingPoint 8 24))
(declare-fun x1 () (_ FloatingPoint 8 24))
(declare-fun x2 () (_ FloatingPoint 8 24))
(declare-fun x3 () (_ FloatingPoint 8 24))
(declare-fun x4 () (_ FloatingPoint 8 24))
(assert (let ((.def_16 (fp.leq x0 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_15 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x0)))
(let ((.def_17 (and .def_15 .def_16)))
.def_17))))
(assert (let ((.def_20 (fp.leq x1 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_19 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x1)))
(let ((.def_21 (and .def_19 .def_20)))
.def_21))))
(assert (let ((.def_24 (fp.leq x2 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_23 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x2)))
(let ((.def_25 (and .def_23 .def_24)))
.def_25))))
(assert (let ((.def_28 (fp.leq x3 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_27 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x3)))
(let ((.def_29 (and .def_27 .def_28)))
.def_29))))
(assert (let ((.def_32 (fp.leq x4 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_31 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x4)))
(let ((.def_33 (and .def_31 .def_32)))
.def_33))))
(assert (let ((.def_63 (fp.mul RNE x4 (fp #b1 #b01111001 #b10111010010111100011011))))
(let ((.def_58 (fp.mul RNE x3 (fp #b1 #b01111101 #b00010011011101001011110))))
(let ((.def_53 (fp.mul RNE x2 (fp #b1 #b01111110 #b10101111000110101010000))))
(let ((.def_48 (fp.mul RNE x1 (fp #b1 #b01111110 #b10001000001100010010011))))
(let ((.def_43 (fp.mul RNE x0 (fp #b1 #b01111110 #b11001000001100010010011))))
(let ((.def_44 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_43)))
(let ((.def_49 (fp.add RNE .def_44 .def_48)))
(let ((.def_54 (fp.add RNE .def_49 .def_53)))
(let ((.def_59 (fp.add RNE .def_54 .def_58)))
(let ((.def_64 (fp.add RNE .def_59 .def_63)))
(let ((.def_65 (fp.leq .def_64 (fp #b0 #b01111011 #b10100001110010101100000))))
.def_65))))))))))))
(assert (let ((.def_90 (fp.mul RNE x4 (fp #b1 #b01111110 #b10010111000010100011111))))
(let ((.def_85 (fp.mul RNE x3 (fp #b1 #b01111110 #b00011111101111100111011))))
(let ((.def_80 (fp.mul RNE x2 (fp #b0 #b01111110 #b01101011000000100000110))))
(let ((.def_76 (fp.mul RNE x1 (fp #b1 #b01111011 #b10000001000001100010010))))
(let ((.def_71 (fp.mul RNE x0 (fp #b1 #b01111101 #b11000101101000011100101))))
(let ((.def_72 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_71)))
(let ((.def_77 (fp.add RNE .def_72 .def_76)))
(let ((.def_81 (fp.add RNE .def_77 .def_80)))
(let ((.def_86 (fp.add RNE .def_81 .def_85)))
(let ((.def_91 (fp.add RNE .def_86 .def_90)))
(let ((.def_92 (fp.leq .def_91 (fp #b0 #b01111110 #b01111100011010100111111))))
.def_92))))))))))))
(assert (let ((.def_114 (fp.mul RNE x4 (fp #b0 #b01111100 #b11010111000010100011111))))
(let ((.def_110 (fp.mul RNE x3 (fp #b0 #b01111110 #b11011010100111111011111))))
(let ((.def_106 (fp.mul RNE x2 (fp #b0 #b01111101 #b11100010010011011101001))))
(let ((.def_102 (fp.mul RNE x1 (fp #b0 #b01111101 #b00111111011111001110111))))
(let ((.def_98 (fp.mul RNE x0 (fp #b0 #b01111110 #b11110000101000111101100))))
(let ((.def_99 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_98)))
(let ((.def_103 (fp.add RNE .def_99 .def_102)))
(let ((.def_107 (fp.add RNE .def_103 .def_106)))
(let ((.def_111 (fp.add RNE .def_107 .def_110)))
(let ((.def_115 (fp.add RNE .def_111 .def_114)))
(let ((.def_116 (fp.leq (fp #b1 #b01111110 #b00101010011111101111101) .def_115)))
.def_116))))))))))))
(assert (let ((.def_140 (fp.mul RNE x4 (fp #b0 #b01111101 #b10000000000000000000000))))
(let ((.def_136 (fp.mul RNE x3 (fp #b0 #b01111011 #b00101111000110101010000))))
(let ((.def_132 (fp.mul RNE x2 (fp #b1 #b01111101 #b00010100011110101110001))))
(let ((.def_127 (fp.mul RNE x1 (fp #b1 #b01111101 #b10100101111000110101010))))
(let ((.def_122 (fp.mul RNE x0 (fp #b0 #b01111101 #b11011110001101010100000))))
(let ((.def_123 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_122)))
(let ((.def_128 (fp.add RNE .def_123 .def_127)))
(let ((.def_133 (fp.add RNE .def_128 .def_132)))
(let ((.def_137 (fp.add RNE .def_133 .def_136)))
(let ((.def_141 (fp.add RNE .def_137 .def_140)))
(let ((.def_142 (fp.leq (fp #b1 #b01111011 #b11101111100111011011001) .def_141)))
.def_142))))))))))))
(assert (let ((.def_167 (fp.mul RNE x4 (fp #b1 #b01111110 #b00001001001101110100110))))
(let ((.def_162 (fp.mul RNE x3 (fp #b1 #b01111101 #b01101000011100101011000))))
(let ((.def_157 (fp.mul RNE x2 (fp #b1 #b01111101 #b00010000011000100100111))))
(let ((.def_152 (fp.mul RNE x1 (fp #b0 #b01111110 #b10110100101111000110101))))
(let ((.def_148 (fp.mul RNE x0 (fp #b1 #b01111101 #b00110110010001011010001))))
(let ((.def_149 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_148)))
(let ((.def_153 (fp.add RNE .def_149 .def_152)))
(let ((.def_158 (fp.add RNE .def_153 .def_157)))
(let ((.def_163 (fp.add RNE .def_158 .def_162)))
(let ((.def_168 (fp.add RNE .def_163 .def_167)))
(let ((.def_169 (fp.leq (fp #b0 #b01111100 #b10001011010000111001011) .def_168)))
.def_169))))))))))))
(assert (let ((.def_193 (fp.mul RNE x4 (fp #b1 #b01111110 #b01100110011001100110011))))
(let ((.def_188 (fp.mul RNE x3 (fp #b0 #b01111110 #b11101001111110111110100))))
(let ((.def_184 (fp.mul RNE x2 (fp #b0 #b01111101 #b01011100001010001111011))))
(let ((.def_180 (fp.mul RNE x1 (fp #b0 #b01111110 #b01000110101001111111000))))
(let ((.def_176 (fp.mul RNE x0 (fp #b1 #b01111110 #b01001110010101100000010))))
(let ((.def_177 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_176)))
(let ((.def_181 (fp.add RNE .def_177 .def_180)))
(let ((.def_185 (fp.add RNE .def_181 .def_184)))
(let ((.def_189 (fp.add RNE .def_185 .def_188)))
(let ((.def_194 (fp.add RNE .def_189 .def_193)))
(let ((.def_195 (fp.leq (fp #b1 #b01111101 #b01010011111101111100111) .def_194)))
.def_195))))))))))))
(assert (let ((.def_221 (fp.mul RNE x4 (fp #b1 #b01111110 #b11101100100010110100010))))
(let ((.def_216 (fp.mul RNE x3 (fp #b1 #b01111101 #b11111011111001110110110))))
(let ((.def_211 (fp.mul RNE x2 (fp #b1 #b01111101 #b00001100010010011011101))))
(let ((.def_206 (fp.mul RNE x1 (fp #b0 #b01111100 #b00001000001100010010011))))
(let ((.def_202 (fp.mul RNE x0 (fp #b1 #b01111110 #b11010000111001010110000))))
(let ((.def_203 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_202)))
(let ((.def_207 (fp.add RNE .def_203 .def_206)))
(let ((.def_212 (fp.add RNE .def_207 .def_211)))
(let ((.def_217 (fp.add RNE .def_212 .def_216)))
(let ((.def_222 (fp.add RNE .def_217 .def_221)))
(let ((.def_223 (fp.leq .def_222 (fp #b1 #b01111100 #b01001111110111110011110))))
.def_223))))))))))))
(assert (let ((.def_247 (fp.mul RNE x4 (fp #b1 #b01111101 #b10110111010010111100011))))
(let ((.def_242 (fp.mul RNE x3 (fp #b1 #b01111101 #b10000010000011000100101))))
(let ((.def_237 (fp.mul RNE x2 (fp #b1 #b01111101 #b00011111101111100111011))))
(let ((.def_232 (fp.mul RNE x1 (fp #b0 #b01111101 #b10110100001110010101100))))
(let ((.def_228 (fp.mul RNE x0 (fp #b0 #b01111110 #b01100000010000011000101))))
(let ((.def_229 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_228)))
(let ((.def_233 (fp.add RNE .def_229 .def_232)))
(let ((.def_238 (fp.add RNE .def_233 .def_237)))
(let ((.def_243 (fp.add RNE .def_238 .def_242)))
(let ((.def_248 (fp.add RNE .def_243 .def_247)))
(let ((.def_249 (fp.leq .def_248 (fp #b0 #b01111100 #b10110110010001011010001))))
.def_249))))))))))))
(assert (let ((.def_273 (fp.mul RNE x4 (fp #b0 #b01111110 #b10100110011001100110011))))
(let ((.def_269 (fp.mul RNE x3 (fp #b1 #b01111010 #b11111011111001110110110))))
(let ((.def_264 (fp.mul RNE x2 (fp #b0 #b01111011 #b11011111001110110110010))))
(let ((.def_260 (fp.mul RNE x1 (fp #b1 #b01111110 #b00001000101101000011101))))
(let ((.def_255 (fp.mul RNE x0 (fp #b1 #b01111101 #b00101011000000100000110))))
(let ((.def_256 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_255)))
(let ((.def_261 (fp.add RNE .def_256 .def_260)))
(let ((.def_265 (fp.add RNE .def_261 .def_264)))
(let ((.def_270 (fp.add RNE .def_265 .def_269)))
(let ((.def_274 (fp.add RNE .def_270 .def_273)))
(let ((.def_275 (fp.leq (fp #b0 #b01111011 #b11001110110110010001011) .def_274)))
.def_275))))))))))))
(assert (let ((.def_300 (fp.mul RNE x4 (fp #b1 #b01111101 #b00101101000011100101011))))
(let ((.def_295 (fp.mul RNE x3 (fp #b1 #b01111110 #b11110110010001011010001))))
(let ((.def_290 (fp.mul RNE x2 (fp #b1 #b01111110 #b00001010001111010111000))))
(let ((.def_285 (fp.mul RNE x1 (fp #b0 #b01111110 #b00011010000111001010110))))
(let ((.def_281 (fp.mul RNE x0 (fp #b1 #b01111110 #b10001111110111110011110))))
(let ((.def_282 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_281)))
(let ((.def_286 (fp.add RNE .def_282 .def_285)))
(let ((.def_291 (fp.add RNE .def_286 .def_290)))
(let ((.def_296 (fp.add RNE .def_291 .def_295)))
(let ((.def_301 (fp.add RNE .def_296 .def_300)))
(let ((.def_302 (fp.leq .def_301 (fp #b0 #b01111110 #b00100100110111010011000))))
.def_302))))))))))))
(check-sat)
