(declare-fun x0 () (_ FloatingPoint 8 24))
(declare-fun x1 () (_ FloatingPoint 8 24))
(declare-fun x2 () (_ FloatingPoint 8 24))
(declare-fun x3 () (_ FloatingPoint 8 24))
(declare-fun x4 () (_ FloatingPoint 8 24))
(assert (let ((.def_16 (fp.leq x0 (fp #b0 #b10000001 #b01000000000000000000000))))
(let ((.def_15 (fp.leq (fp #b1 #b10000001 #b01000000000000000000000) x0)))
(let ((.def_17 (and .def_15 .def_16)))
.def_17))))
(assert (let ((.def_20 (fp.leq x1 (fp #b0 #b10000001 #b01000000000000000000000))))
(let ((.def_19 (fp.leq (fp #b1 #b10000001 #b01000000000000000000000) x1)))
(let ((.def_21 (and .def_19 .def_20)))
.def_21))))
(assert (let ((.def_24 (fp.leq x2 (fp #b0 #b10000001 #b01000000000000000000000))))
(let ((.def_23 (fp.leq (fp #b1 #b10000001 #b01000000000000000000000) x2)))
(let ((.def_25 (and .def_23 .def_24)))
.def_25))))
(assert (let ((.def_28 (fp.leq x3 (fp #b0 #b10000001 #b01000000000000000000000))))
(let ((.def_27 (fp.leq (fp #b1 #b10000001 #b01000000000000000000000) x3)))
(let ((.def_29 (and .def_27 .def_28)))
.def_29))))
(assert (let ((.def_32 (fp.leq x4 (fp #b0 #b10000001 #b01000000000000000000000))))
(let ((.def_31 (fp.leq (fp #b1 #b10000001 #b01000000000000000000000) x4)))
(let ((.def_33 (and .def_31 .def_32)))
.def_33))))
(assert (let ((.def_61 (fp.mul RNE x4 (fp #b1 #b01111101 #b01101111100111011011001))))
(let ((.def_56 (fp.mul RNE x3 (fp #b1 #b01111101 #b11110111110011101101101))))
(let ((.def_51 (fp.mul RNE x2 (fp #b0 #b01111011 #b11111011111001110110110))))
(let ((.def_47 (fp.mul RNE x1 (fp #b1 #b01111101 #b10001001001101110100110))))
(let ((.def_42 (fp.mul RNE x0 (fp #b0 #b01111110 #b00110001001001101110101))))
(let ((.def_43 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_42)))
(let ((.def_48 (fp.add RNE .def_43 .def_47)))
(let ((.def_52 (fp.add RNE .def_48 .def_51)))
(let ((.def_57 (fp.add RNE .def_52 .def_56)))
(let ((.def_62 (fp.add RNE .def_57 .def_61)))
(let ((.def_63 (fp.leq (fp #b0 #b01111101 #b10010011011101001011110) .def_62)))
.def_63))))))))))))
(assert (let ((.def_86 (fp.mul RNE x4 (fp #b1 #b01111110 #b00110001001001101110101))))
(let ((.def_83 (fp.mul RNE x3 (fp #b0 #b01111110 #b01001000101101000011101))))
(let ((.def_79 (fp.mul RNE x2 (fp #b1 #b01111101 #b01011100001010001111011))))
(let ((.def_74 (fp.mul RNE x1 (fp #b0 #b01111100 #b11000110101001111111000))))
(let ((.def_70 (fp.mul RNE x0 (fp #b1 #b01111110 #b00000010000011000100101))))
(let ((.def_71 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_70)))
(let ((.def_75 (fp.add RNE .def_71 .def_74)))
(let ((.def_80 (fp.add RNE .def_75 .def_79)))
(let ((.def_84 (fp.add RNE .def_80 .def_83)))
(let ((.def_87 (fp.add RNE .def_84 .def_86)))
(let ((.def_88 (fp.leq .def_87 (fp #b1 #b01111101 #b10001110010101100000010))))
.def_88))))))))))))
(assert (let ((.def_114 (fp.mul RNE x4 (fp #b1 #b01111110 #b00001001101110100101111))))
(let ((.def_109 (fp.mul RNE x3 (fp #b1 #b01111010 #b11001010110000001000010))))
(let ((.def_104 (fp.mul RNE x2 (fp #b1 #b01111110 #b01101100000010000011001))))
(let ((.def_99 (fp.mul RNE x1 (fp #b1 #b01111101 #b01001010110000001000010))))
(let ((.def_94 (fp.mul RNE x0 (fp #b1 #b01111110 #b10010000011000100100111))))
(let ((.def_95 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_94)))
(let ((.def_100 (fp.add RNE .def_95 .def_99)))
(let ((.def_105 (fp.add RNE .def_100 .def_104)))
(let ((.def_110 (fp.add RNE .def_105 .def_109)))
(let ((.def_115 (fp.add RNE .def_110 .def_114)))
(let ((.def_116 (fp.leq .def_115 (fp #b0 #b01111011 #b00001110010101100000010))))
.def_116))))))))))))
(assert (let ((.def_140 (fp.mul RNE x4 (fp #b0 #b01111011 #b10001101010011111110000))))
(let ((.def_136 (fp.mul RNE x3 (fp #b1 #b01111101 #b10100000110001001001110))))
(let ((.def_131 (fp.mul RNE x2 (fp #b0 #b01111101 #b00001011010000111001011))))
(let ((.def_127 (fp.mul RNE x1 (fp #b1 #b01111110 #b11100010010011011101001))))
(let ((.def_122 (fp.mul RNE x0 (fp #b0 #b01111110 #b01101111100111011011001))))
(let ((.def_123 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_122)))
(let ((.def_128 (fp.add RNE .def_123 .def_127)))
(let ((.def_132 (fp.add RNE .def_128 .def_131)))
(let ((.def_137 (fp.add RNE .def_132 .def_136)))
(let ((.def_141 (fp.add RNE .def_137 .def_140)))
(let ((.def_142 (fp.leq .def_141 (fp #b1 #b01111101 #b00000101000111101011100))))
.def_142))))))))))))
(assert (let ((.def_164 (fp.mul RNE x4 (fp #b0 #b01111110 #b00101101000011100101011))))
(let ((.def_160 (fp.mul RNE x3 (fp #b0 #b01111101 #b01000100100110111010011))))
(let ((.def_156 (fp.mul RNE x2 (fp #b0 #b01111100 #b10110110010001011010001))))
(let ((.def_152 (fp.mul RNE x1 (fp #b0 #b01111110 #b10011110101110000101001))))
(let ((.def_148 (fp.mul RNE x0 (fp #b0 #b01111110 #b11101110000101000111101))))
(let ((.def_149 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_148)))
(let ((.def_153 (fp.add RNE .def_149 .def_152)))
(let ((.def_157 (fp.add RNE .def_153 .def_156)))
(let ((.def_161 (fp.add RNE .def_157 .def_160)))
(let ((.def_165 (fp.add RNE .def_161 .def_164)))
(let ((.def_166 (fp.leq .def_165 (fp #b1 #b01111110 #b01100110111010010111100))))
.def_166))))))))))))
(check-sat)
