(declare-fun x0 () (_ FloatingPoint 8 24))
(declare-fun x1 () (_ FloatingPoint 8 24))
(declare-fun x2 () (_ FloatingPoint 8 24))
(declare-fun x3 () (_ FloatingPoint 8 24))
(declare-fun x4 () (_ FloatingPoint 8 24))
(assert (let ((.def_16 (fp.leq x0 (fp #b0 #b10000010 #b01000000000000000000000))))
(let ((.def_15 (fp.leq (fp #b1 #b10000010 #b01000000000000000000000) x0)))
(let ((.def_17 (and .def_15 .def_16)))
.def_17))))
(assert (let ((.def_20 (fp.leq x1 (fp #b0 #b10000010 #b01000000000000000000000))))
(let ((.def_19 (fp.leq (fp #b1 #b10000010 #b01000000000000000000000) x1)))
(let ((.def_21 (and .def_19 .def_20)))
.def_21))))
(assert (let ((.def_24 (fp.leq x2 (fp #b0 #b10000010 #b01000000000000000000000))))
(let ((.def_23 (fp.leq (fp #b1 #b10000010 #b01000000000000000000000) x2)))
(let ((.def_25 (and .def_23 .def_24)))
.def_25))))
(assert (let ((.def_28 (fp.leq x3 (fp #b0 #b10000010 #b01000000000000000000000))))
(let ((.def_27 (fp.leq (fp #b1 #b10000010 #b01000000000000000000000) x3)))
(let ((.def_29 (and .def_27 .def_28)))
.def_29))))
(assert (let ((.def_32 (fp.leq x4 (fp #b0 #b10000010 #b01000000000000000000000))))
(let ((.def_31 (fp.leq (fp #b1 #b10000010 #b01000000000000000000000) x4)))
(let ((.def_33 (and .def_31 .def_32)))
.def_33))))
(assert (let ((.def_59 (fp.mul RNE x4 (fp #b1 #b01111101 #b10100000110001001001110))))
(let ((.def_54 (fp.mul RNE x3 (fp #b0 #b01111110 #b11100010110100001110011))))
(let ((.def_50 (fp.mul RNE x2 (fp #b0 #b01111110 #b01011001000101101000100))))
(let ((.def_46 (fp.mul RNE x1 (fp #b0 #b01111110 #b01010101100000010000011))))
(let ((.def_42 (fp.mul RNE x0 (fp #b0 #b01111101 #b11000010100011110101110))))
(let ((.def_43 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_42)))
(let ((.def_47 (fp.add RNE .def_43 .def_46)))
(let ((.def_51 (fp.add RNE .def_47 .def_50)))
(let ((.def_55 (fp.add RNE .def_51 .def_54)))
(let ((.def_60 (fp.add RNE .def_55 .def_59)))
(let ((.def_61 (fp.leq (fp #b0 #b01111101 #b11100001010001111010111) .def_60)))
.def_61))))))))))))
(assert (let ((.def_86 (fp.mul RNE x4 (fp #b1 #b01111100 #b11011111001110110110010))))
(let ((.def_81 (fp.mul RNE x3 (fp #b0 #b01111010 #b00001110010101100000010))))
(let ((.def_77 (fp.mul RNE x2 (fp #b1 #b01111100 #b01100100010110100001110))))
(let ((.def_72 (fp.mul RNE x1 (fp #b1 #b01111101 #b11101101100100010110100))))
(let ((.def_67 (fp.mul RNE x0 (fp #b0 #b01111011 #b11100011010100111111100))))
(let ((.def_68 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_67)))
(let ((.def_73 (fp.add RNE .def_68 .def_72)))
(let ((.def_78 (fp.add RNE .def_73 .def_77)))
(let ((.def_82 (fp.add RNE .def_78 .def_81)))
(let ((.def_87 (fp.add RNE .def_82 .def_86)))
(let ((.def_88 (fp.leq .def_87 (fp #b1 #b01111101 #b11100011010100111111100))))
.def_88))))))))))))
(assert (let ((.def_112 (fp.mul RNE x4 (fp #b1 #b01111101 #b10101110000101000111101))))
(let ((.def_107 (fp.mul RNE x3 (fp #b1 #b01111110 #b11010111100011010101000))))
(let ((.def_102 (fp.mul RNE x2 (fp #b0 #b01111110 #b01011100001010001111011))))
(let ((.def_98 (fp.mul RNE x1 (fp #b0 #b01111101 #b10001001001101110100110))))
(let ((.def_94 (fp.mul RNE x0 (fp #b0 #b01111110 #b10111011011001000101101))))
(let ((.def_95 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_94)))
(let ((.def_99 (fp.add RNE .def_95 .def_98)))
(let ((.def_103 (fp.add RNE .def_99 .def_102)))
(let ((.def_108 (fp.add RNE .def_103 .def_107)))
(let ((.def_113 (fp.add RNE .def_108 .def_112)))
(let ((.def_114 (fp.leq (fp #b1 #b01111110 #b00011101101100100010111) .def_113)))
.def_114))))))))))))
(assert (let ((.def_139 (fp.mul RNE x4 (fp #b1 #b01111110 #b01110001101010011111110))))
(let ((.def_134 (fp.mul RNE x3 (fp #b0 #b01111110 #b10100110111010010111100))))
(let ((.def_130 (fp.mul RNE x2 (fp #b1 #b01111110 #b00100101011000000100001))))
(let ((.def_125 (fp.mul RNE x1 (fp #b1 #b01111100 #b10101001111110111110100))))
(let ((.def_120 (fp.mul RNE x0 (fp #b1 #b01111110 #b10011001100110011001101))))
(let ((.def_121 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_120)))
(let ((.def_126 (fp.add RNE .def_121 .def_125)))
(let ((.def_131 (fp.add RNE .def_126 .def_130)))
(let ((.def_135 (fp.add RNE .def_131 .def_134)))
(let ((.def_140 (fp.add RNE .def_135 .def_139)))
(let ((.def_141 (fp.leq .def_140 (fp #b0 #b01111110 #b11111010111000010100100))))
.def_141))))))))))))
(assert (let ((.def_164 (fp.mul RNE x4 (fp #b1 #b01111110 #b01101100000010000011001))))
(let ((.def_159 (fp.mul RNE x3 (fp #b0 #b01111110 #b00011101101100100010111))))
(let ((.def_157 (fp.mul RNE x2 (fp #b1 #b01111110 #b01010100111111011111010))))
(let ((.def_152 (fp.mul RNE x1 (fp #b1 #b01111101 #b10000101000111101011100))))
(let ((.def_147 (fp.mul RNE x0 (fp #b1 #b01111001 #b01000111101011100001010))))
(let ((.def_148 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_147)))
(let ((.def_153 (fp.add RNE .def_148 .def_152)))
(let ((.def_158 (fp.add RNE .def_153 .def_157)))
(let ((.def_160 (fp.add RNE .def_158 .def_159)))
(let ((.def_165 (fp.add RNE .def_160 .def_164)))
(let ((.def_166 (fp.leq .def_165 (fp #b0 #b01111100 #b00111111011111001110111))))
.def_166))))))))))))
(check-sat)
