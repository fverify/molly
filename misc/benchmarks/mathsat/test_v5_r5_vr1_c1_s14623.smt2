(declare-fun x0 () (_ FloatingPoint 8 24))
(declare-fun x1 () (_ FloatingPoint 8 24))
(declare-fun x2 () (_ FloatingPoint 8 24))
(declare-fun x3 () (_ FloatingPoint 8 24))
(declare-fun x4 () (_ FloatingPoint 8 24))
(assert (let ((.def_16 (fp.leq x0 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_15 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x0)))
(let ((.def_17 (and .def_15 .def_16)))
.def_17))))
(assert (let ((.def_20 (fp.leq x1 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_19 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x1)))
(let ((.def_21 (and .def_19 .def_20)))
.def_21))))
(assert (let ((.def_24 (fp.leq x2 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_23 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x2)))
(let ((.def_25 (and .def_23 .def_24)))
.def_25))))
(assert (let ((.def_28 (fp.leq x3 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_27 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x3)))
(let ((.def_29 (and .def_27 .def_28)))
.def_29))))
(assert (let ((.def_32 (fp.leq x4 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_31 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x4)))
(let ((.def_33 (and .def_31 .def_32)))
.def_33))))
(assert (let ((.def_62 (fp.mul RNE x4 (fp #b0 #b01111110 #b10000010100011110101110))))
(let ((.def_58 (fp.mul RNE x3 (fp #b0 #b01111101 #b00001001001101110100110))))
(let ((.def_54 (fp.mul RNE x2 (fp #b1 #b01111100 #b11010010111100011010101))))
(let ((.def_49 (fp.mul RNE x1 (fp #b1 #b01111100 #b10011001100110011001101))))
(let ((.def_44 (fp.mul RNE x0 (fp #b1 #b01111011 #b10100001110010101100000))))
(let ((.def_45 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_44)))
(let ((.def_50 (fp.add RNE .def_45 .def_49)))
(let ((.def_55 (fp.add RNE .def_50 .def_54)))
(let ((.def_59 (fp.add RNE .def_55 .def_58)))
(let ((.def_63 (fp.add RNE .def_59 .def_62)))
(let ((.def_64 (fp.leq (fp #b1 #b01111100 #b00111101011100001010010) .def_63)))
.def_64))))))))))))
(assert (let ((.def_89 (fp.mul RNE x4 (fp #b1 #b01111110 #b00101011100001010001111))))
(let ((.def_84 (fp.mul RNE x3 (fp #b1 #b01111100 #b00000010000011000100101))))
(let ((.def_79 (fp.mul RNE x2 (fp #b1 #b01111110 #b01010010011011101001100))))
(let ((.def_74 (fp.mul RNE x1 (fp #b1 #b01111100 #b01010110000001000001100))))
(let ((.def_69 (fp.mul RNE x0 (fp #b0 #b01110111 #b11001010110000001000010))))
(let ((.def_70 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_69)))
(let ((.def_75 (fp.add RNE .def_70 .def_74)))
(let ((.def_80 (fp.add RNE .def_75 .def_79)))
(let ((.def_85 (fp.add RNE .def_80 .def_84)))
(let ((.def_90 (fp.add RNE .def_85 .def_89)))
(let ((.def_91 (fp.leq (fp #b0 #b01111110 #b01111100011010100111111) .def_90)))
.def_91))))))))))))
(assert (let ((.def_115 (fp.mul RNE x4 (fp #b1 #b01111110 #b01010100011110101110001))))
(let ((.def_110 (fp.mul RNE x3 (fp #b0 #b01111011 #b01100000010000011000101))))
(let ((.def_106 (fp.mul RNE x2 (fp #b1 #b01111101 #b10111011011001000101101))))
(let ((.def_101 (fp.mul RNE x1 (fp #b1 #b01111101 #b11111000110101001111111))))
(let ((.def_96 (fp.mul RNE x0 (fp #b0 #b01111011 #b11000110101001111111000))))
(let ((.def_97 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_96)))
(let ((.def_102 (fp.add RNE .def_97 .def_101)))
(let ((.def_107 (fp.add RNE .def_102 .def_106)))
(let ((.def_111 (fp.add RNE .def_107 .def_110)))
(let ((.def_116 (fp.add RNE .def_111 .def_115)))
(let ((.def_117 (fp.leq .def_116 (fp #b0 #b01111110 #b11001010001111010111000))))
.def_117))))))))))))
(assert (let ((.def_139 (fp.mul RNE x4 (fp #b1 #b01111110 #b11110001101010011111110))))
(let ((.def_134 (fp.mul RNE x3 (fp #b1 #b01111011 #b10100001110010101100000))))
(let ((.def_132 (fp.mul RNE x2 (fp #b1 #b01111101 #b01011101001011110001101))))
(let ((.def_127 (fp.mul RNE x1 (fp #b1 #b01111011 #b00010110100001110010110))))
(let ((.def_122 (fp.mul RNE x0 (fp #b0 #b01111101 #b10111101011100001010010))))
(let ((.def_123 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_122)))
(let ((.def_128 (fp.add RNE .def_123 .def_127)))
(let ((.def_133 (fp.add RNE .def_128 .def_132)))
(let ((.def_135 (fp.add RNE .def_133 .def_134)))
(let ((.def_140 (fp.add RNE .def_135 .def_139)))
(let ((.def_141 (fp.leq (fp #b0 #b01111110 #b01001100110011001100110) .def_140)))
.def_141))))))))))))
(assert (let ((.def_166 (fp.mul RNE x4 (fp #b1 #b01111011 #b00000010000011000100101))))
(let ((.def_161 (fp.mul RNE x3 (fp #b1 #b01111010 #b00000110001001001101111))))
(let ((.def_156 (fp.mul RNE x2 (fp #b1 #b01111001 #b01000111101011100001010))))
(let ((.def_151 (fp.mul RNE x1 (fp #b0 #b01111110 #b00000001000001100010010))))
(let ((.def_147 (fp.mul RNE x0 (fp #b1 #b01111110 #b01000000000000000000000))))
(let ((.def_148 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_147)))
(let ((.def_152 (fp.add RNE .def_148 .def_151)))
(let ((.def_157 (fp.add RNE .def_152 .def_156)))
(let ((.def_162 (fp.add RNE .def_157 .def_161)))
(let ((.def_167 (fp.add RNE .def_162 .def_166)))
(let ((.def_168 (fp.leq (fp #b0 #b01111100 #b01100010010011011101001) .def_167)))
.def_168))))))))))))
(check-sat)
