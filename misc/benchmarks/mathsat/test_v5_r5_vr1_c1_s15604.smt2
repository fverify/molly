(declare-fun x0 () (_ FloatingPoint 8 24))
(declare-fun x1 () (_ FloatingPoint 8 24))
(declare-fun x2 () (_ FloatingPoint 8 24))
(declare-fun x3 () (_ FloatingPoint 8 24))
(declare-fun x4 () (_ FloatingPoint 8 24))
(assert (let ((.def_16 (fp.leq x0 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_15 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x0)))
(let ((.def_17 (and .def_15 .def_16)))
.def_17))))
(assert (let ((.def_20 (fp.leq x1 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_19 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x1)))
(let ((.def_21 (and .def_19 .def_20)))
.def_21))))
(assert (let ((.def_24 (fp.leq x2 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_23 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x2)))
(let ((.def_25 (and .def_23 .def_24)))
.def_25))))
(assert (let ((.def_28 (fp.leq x3 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_27 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x3)))
(let ((.def_29 (and .def_27 .def_28)))
.def_29))))
(assert (let ((.def_32 (fp.leq x4 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_31 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x4)))
(let ((.def_33 (and .def_31 .def_32)))
.def_33))))
(assert (let ((.def_62 (fp.mul RNE x4 (fp #b1 #b01111010 #b11101011100001010001111))))
(let ((.def_57 (fp.mul RNE x3 (fp #b1 #b01111101 #b11010111000010100011111))))
(let ((.def_52 (fp.mul RNE x2 (fp #b1 #b01111110 #b00110011101101100100011))))
(let ((.def_47 (fp.mul RNE x1 (fp #b0 #b01111110 #b00000111001010110000001))))
(let ((.def_43 (fp.mul RNE x0 (fp #b1 #b01111010 #b01100000010000011000101))))
(let ((.def_44 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_43)))
(let ((.def_48 (fp.add RNE .def_44 .def_47)))
(let ((.def_53 (fp.add RNE .def_48 .def_52)))
(let ((.def_58 (fp.add RNE .def_53 .def_57)))
(let ((.def_63 (fp.add RNE .def_58 .def_62)))
(let ((.def_64 (fp.leq .def_63 (fp #b0 #b01111110 #b00110000101000111101100))))
.def_64))))))))))))
(assert (let ((.def_87 (fp.mul RNE x4 (fp #b0 #b01111101 #b00011001100110011001101))))
(let ((.def_83 (fp.mul RNE x3 (fp #b0 #b01111110 #b01111101011100001010010))))
(let ((.def_79 (fp.mul RNE x2 (fp #b1 #b01111011 #b01111000110101001111111))))
(let ((.def_74 (fp.mul RNE x1 (fp #b0 #b01111011 #b10010001011010000111001))))
(let ((.def_70 (fp.mul RNE x0 (fp #b0 #b01111110 #b01011010000111001010110))))
(let ((.def_71 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_70)))
(let ((.def_75 (fp.add RNE .def_71 .def_74)))
(let ((.def_80 (fp.add RNE .def_75 .def_79)))
(let ((.def_84 (fp.add RNE .def_80 .def_83)))
(let ((.def_88 (fp.add RNE .def_84 .def_87)))
(let ((.def_89 (fp.leq .def_88 (fp #b1 #b01111101 #b01110100101111000110101))))
.def_89))))))))))))
(assert (let ((.def_113 (fp.mul RNE x4 (fp #b0 #b01111101 #b11101100100010110100010))))
(let ((.def_109 (fp.mul RNE x3 (fp #b1 #b01111101 #b11011110001101010100000))))
(let ((.def_104 (fp.mul RNE x2 (fp #b1 #b01111110 #b00001110110110010001011))))
(let ((.def_99 (fp.mul RNE x1 (fp #b0 #b01111110 #b01011010100111111011111))))
(let ((.def_95 (fp.mul RNE x0 (fp #b0 #b01111101 #b00100100110111010011000))))
(let ((.def_96 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_95)))
(let ((.def_100 (fp.add RNE .def_96 .def_99)))
(let ((.def_105 (fp.add RNE .def_100 .def_104)))
(let ((.def_110 (fp.add RNE .def_105 .def_109)))
(let ((.def_114 (fp.add RNE .def_110 .def_113)))
(let ((.def_115 (fp.leq (fp #b1 #b01111110 #b01101000111101011100001) .def_114)))
.def_115))))))))))))
(assert (let ((.def_138 (fp.mul RNE x4 (fp #b0 #b01111110 #b10010110000001000001100))))
(let ((.def_134 (fp.mul RNE x3 (fp #b1 #b01111101 #b00111001010110000001000))))
(let ((.def_129 (fp.mul RNE x2 (fp #b1 #b01111110 #b11101010011111101111101))))
(let ((.def_124 (fp.mul RNE x1 (fp #b0 #b01111101 #b11000000100000110001001))))
(let ((.def_120 (fp.mul RNE x0 (fp #b0 #b01111110 #b11110000101000111101100))))
(let ((.def_121 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_120)))
(let ((.def_125 (fp.add RNE .def_121 .def_124)))
(let ((.def_130 (fp.add RNE .def_125 .def_129)))
(let ((.def_135 (fp.add RNE .def_130 .def_134)))
(let ((.def_139 (fp.add RNE .def_135 .def_138)))
(let ((.def_140 (fp.leq (fp #b0 #b01111101 #b10011001100110011001101) .def_139)))
.def_140))))))))))))
(assert (let ((.def_164 (fp.mul RNE x4 (fp #b1 #b01111101 #b11011011001000101101000))))
(let ((.def_159 (fp.mul RNE x3 (fp #b0 #b01111110 #b10000101000111101011100))))
(let ((.def_155 (fp.mul RNE x2 (fp #b1 #b01111101 #b10110101001111110111110))))
(let ((.def_150 (fp.mul RNE x1 (fp #b1 #b01111101 #b10010100011110101110001))))
(let ((.def_145 (fp.mul RNE x0 (fp #b0 #b01111101 #b11111011111001110110110))))
(let ((.def_146 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_145)))
(let ((.def_151 (fp.add RNE .def_146 .def_150)))
(let ((.def_156 (fp.add RNE .def_151 .def_155)))
(let ((.def_160 (fp.add RNE .def_156 .def_159)))
(let ((.def_165 (fp.add RNE .def_160 .def_164)))
(let ((.def_166 (fp.leq .def_165 (fp #b0 #b01111110 #b11000110101001111111000))))
.def_166))))))))))))
(check-sat)
