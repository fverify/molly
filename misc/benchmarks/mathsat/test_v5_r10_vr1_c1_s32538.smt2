(declare-fun x0 () (_ FloatingPoint 8 24))
(declare-fun x1 () (_ FloatingPoint 8 24))
(declare-fun x2 () (_ FloatingPoint 8 24))
(declare-fun x3 () (_ FloatingPoint 8 24))
(declare-fun x4 () (_ FloatingPoint 8 24))
(assert (let ((.def_16 (fp.leq x0 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_15 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x0)))
(let ((.def_17 (and .def_15 .def_16)))
.def_17))))
(assert (let ((.def_20 (fp.leq x1 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_19 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x1)))
(let ((.def_21 (and .def_19 .def_20)))
.def_21))))
(assert (let ((.def_24 (fp.leq x2 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_23 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x2)))
(let ((.def_25 (and .def_23 .def_24)))
.def_25))))
(assert (let ((.def_28 (fp.leq x3 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_27 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x3)))
(let ((.def_29 (and .def_27 .def_28)))
.def_29))))
(assert (let ((.def_32 (fp.leq x4 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_31 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x4)))
(let ((.def_33 (and .def_31 .def_32)))
.def_33))))
(assert (let ((.def_64 (fp.mul RNE x4 (fp #b1 #b01111101 #b10111111011111001110111))))
(let ((.def_59 (fp.mul RNE x3 (fp #b1 #b01111001 #b01101000011100101011000))))
(let ((.def_54 (fp.mul RNE x2 (fp #b1 #b01111110 #b10110111010010111100011))))
(let ((.def_49 (fp.mul RNE x1 (fp #b1 #b01111110 #b00000100100110111010011))))
(let ((.def_44 (fp.mul RNE x0 (fp #b1 #b01111011 #b00111111011111001110111))))
(let ((.def_45 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_44)))
(let ((.def_50 (fp.add RNE .def_45 .def_49)))
(let ((.def_55 (fp.add RNE .def_50 .def_54)))
(let ((.def_60 (fp.add RNE .def_55 .def_59)))
(let ((.def_65 (fp.add RNE .def_60 .def_64)))
(let ((.def_66 (fp.leq .def_65 (fp #b1 #b01111100 #b10011011101001011110010))))
.def_66))))))))))))
(assert (let ((.def_88 (fp.mul RNE x4 (fp #b0 #b01111101 #b11111001110110110010001))))
(let ((.def_84 (fp.mul RNE x3 (fp #b0 #b01111100 #b11010111000010100011111))))
(let ((.def_80 (fp.mul RNE x2 (fp #b1 #b01111000 #b01000111101011100001010))))
(let ((.def_75 (fp.mul RNE x1 (fp #b0 #b01111101 #b00011101101100100010111))))
(let ((.def_71 (fp.mul RNE x0 (fp #b0 #b01111011 #b00000110001001001101111))))
(let ((.def_72 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_71)))
(let ((.def_76 (fp.add RNE .def_72 .def_75)))
(let ((.def_81 (fp.add RNE .def_76 .def_80)))
(let ((.def_85 (fp.add RNE .def_81 .def_84)))
(let ((.def_89 (fp.add RNE .def_85 .def_88)))
(let ((.def_90 (fp.leq (fp #b0 #b01111110 #b10100010110100001110011) .def_89)))
.def_90))))))))))))
(assert (let ((.def_114 (fp.mul RNE x4 (fp #b1 #b01111101 #b10111001010110000001000))))
(let ((.def_109 (fp.mul RNE x3 (fp #b0 #b01111110 #b00111001110110110010001))))
(let ((.def_105 (fp.mul RNE x2 (fp #b1 #b01111110 #b01011010100111111011111))))
(let ((.def_100 (fp.mul RNE x1 (fp #b1 #b01111110 #b01101010011111101111101))))
(let ((.def_95 (fp.mul RNE x0 (fp #b0 #b01111110 #b10011110101110000101001))))
(let ((.def_96 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_95)))
(let ((.def_101 (fp.add RNE .def_96 .def_100)))
(let ((.def_106 (fp.add RNE .def_101 .def_105)))
(let ((.def_110 (fp.add RNE .def_106 .def_109)))
(let ((.def_115 (fp.add RNE .def_110 .def_114)))
(let ((.def_116 (fp.leq .def_115 (fp #b0 #b01111110 #b11111011011001000101101))))
.def_116))))))))))))
(assert (let ((.def_141 (fp.mul RNE x4 (fp #b0 #b01111100 #b10000111001010110000001))))
(let ((.def_137 (fp.mul RNE x3 (fp #b1 #b01111101 #b10101000111101011100001))))
(let ((.def_132 (fp.mul RNE x2 (fp #b1 #b01111010 #b00001110010101100000010))))
(let ((.def_127 (fp.mul RNE x1 (fp #b1 #b01111110 #b10100100110111010011000))))
(let ((.def_122 (fp.mul RNE x0 (fp #b0 #b01111110 #b10010110000001000001100))))
(let ((.def_123 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_122)))
(let ((.def_128 (fp.add RNE .def_123 .def_127)))
(let ((.def_133 (fp.add RNE .def_128 .def_132)))
(let ((.def_138 (fp.add RNE .def_133 .def_137)))
(let ((.def_142 (fp.add RNE .def_138 .def_141)))
(let ((.def_143 (fp.leq (fp #b1 #b01111100 #b00001000001100010010011) .def_142)))
.def_143))))))))))))
(assert (let ((.def_168 (fp.mul RNE x4 (fp #b0 #b01111101 #b00010001011010000111001))))
(let ((.def_164 (fp.mul RNE x3 (fp #b1 #b01111011 #b11111011111001110110110))))
(let ((.def_159 (fp.mul RNE x2 (fp #b1 #b01111110 #b01001000101101000011101))))
(let ((.def_154 (fp.mul RNE x1 (fp #b0 #b01111110 #b00011110101110000101001))))
(let ((.def_150 (fp.mul RNE x0 (fp #b1 #b01111110 #b00011010100111111011111))))
(let ((.def_151 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_150)))
(let ((.def_155 (fp.add RNE .def_151 .def_154)))
(let ((.def_160 (fp.add RNE .def_155 .def_159)))
(let ((.def_165 (fp.add RNE .def_160 .def_164)))
(let ((.def_169 (fp.add RNE .def_165 .def_168)))
(let ((.def_170 (fp.leq .def_169 (fp #b1 #b01111010 #b10101001111110111110100))))
.def_170))))))))))))
(assert (let ((.def_196 (fp.mul RNE x4 (fp #b1 #b01111110 #b10100110011001100110011))))
(let ((.def_191 (fp.mul RNE x3 (fp #b1 #b01111110 #b00010010111100011010101))))
(let ((.def_186 (fp.mul RNE x2 (fp #b1 #b01111010 #b01001111110111110011110))))
(let ((.def_181 (fp.mul RNE x1 (fp #b1 #b01111110 #b00100000010000011000101))))
(let ((.def_176 (fp.mul RNE x0 (fp #b0 #b01111101 #b10001000001100010010011))))
(let ((.def_177 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_176)))
(let ((.def_182 (fp.add RNE .def_177 .def_181)))
(let ((.def_187 (fp.add RNE .def_182 .def_186)))
(let ((.def_192 (fp.add RNE .def_187 .def_191)))
(let ((.def_197 (fp.add RNE .def_192 .def_196)))
(let ((.def_198 (fp.leq .def_197 (fp #b1 #b01111100 #b11010100111111011111010))))
.def_198))))))))))))
(assert (let ((.def_222 (fp.mul RNE x4 (fp #b1 #b01111101 #b01011100001010001111011))))
(let ((.def_217 (fp.mul RNE x3 (fp #b1 #b01111101 #b11111011111001110110110))))
(let ((.def_212 (fp.mul RNE x2 (fp #b0 #b01111000 #b11001010110000001000010))))
(let ((.def_208 (fp.mul RNE x1 (fp #b0 #b01111100 #b10111000010100011110110))))
(let ((.def_204 (fp.mul RNE x0 (fp #b1 #b01111110 #b11101010011111101111101))))
(let ((.def_205 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_204)))
(let ((.def_209 (fp.add RNE .def_205 .def_208)))
(let ((.def_213 (fp.add RNE .def_209 .def_212)))
(let ((.def_218 (fp.add RNE .def_213 .def_217)))
(let ((.def_223 (fp.add RNE .def_218 .def_222)))
(let ((.def_224 (fp.leq (fp #b0 #b01111101 #b10001111010111000010100) .def_223)))
.def_224))))))))))))
(assert (let ((.def_249 (fp.mul RNE x4 (fp #b0 #b01111100 #b00011110101110000101001))))
(let ((.def_245 (fp.mul RNE x3 (fp #b1 #b01111110 #b01011110001101010100000))))
(let ((.def_240 (fp.mul RNE x2 (fp #b1 #b01111101 #b10101111000110101010000))))
(let ((.def_235 (fp.mul RNE x1 (fp #b1 #b01111110 #b00001010110000001000010))))
(let ((.def_230 (fp.mul RNE x0 (fp #b0 #b01111101 #b01101110100101111000111))))
(let ((.def_231 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_230)))
(let ((.def_236 (fp.add RNE .def_231 .def_235)))
(let ((.def_241 (fp.add RNE .def_236 .def_240)))
(let ((.def_246 (fp.add RNE .def_241 .def_245)))
(let ((.def_250 (fp.add RNE .def_246 .def_249)))
(let ((.def_251 (fp.leq (fp #b1 #b01111101 #b11010010111100011010101) .def_250)))
.def_251))))))))))))
(assert (let ((.def_277 (fp.mul RNE x4 (fp #b1 #b01111001 #b11111011111001110110110))))
(let ((.def_272 (fp.mul RNE x3 (fp #b1 #b01111110 #b01100110011001100110011))))
(let ((.def_267 (fp.mul RNE x2 (fp #b1 #b01111110 #b01101111000110101010000))))
(let ((.def_262 (fp.mul RNE x1 (fp #b1 #b01111110 #b10010011011101001011110))))
(let ((.def_257 (fp.mul RNE x0 (fp #b0 #b01111110 #b11000011000100100110111))))
(let ((.def_258 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_257)))
(let ((.def_263 (fp.add RNE .def_258 .def_262)))
(let ((.def_268 (fp.add RNE .def_263 .def_267)))
(let ((.def_273 (fp.add RNE .def_268 .def_272)))
(let ((.def_278 (fp.add RNE .def_273 .def_277)))
(let ((.def_279 (fp.leq .def_278 (fp #b1 #b01111110 #b10101110100101111000111))))
.def_279))))))))))))
(assert (let ((.def_299 (fp.mul RNE x4 (fp #b1 #b01111100 #b11011101001011110001101))))
(let ((.def_294 (fp.mul RNE x3 (fp #b0 #b01111101 #b11101110100101111000111))))
(let ((.def_290 (fp.mul RNE (fp #b1 #b01111111 #b00000000000000000000000) x2)))
(let ((.def_288 (fp.mul RNE x1 (fp #b0 #b01111110 #b10101000011100101011000))))
(let ((.def_284 (fp.mul RNE x0 (fp #b0 #b01111101 #b11100100010110100001110))))
(let ((.def_285 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_284)))
(let ((.def_289 (fp.add RNE .def_285 .def_288)))
(let ((.def_291 (fp.add RNE .def_289 .def_290)))
(let ((.def_295 (fp.add RNE .def_291 .def_294)))
(let ((.def_300 (fp.add RNE .def_295 .def_299)))
(let ((.def_301 (fp.leq .def_300 (fp #b0 #b01111101 #b00011100101011000000100))))
.def_301))))))))))))
(check-sat)
