(declare-fun x0 () (_ FloatingPoint 8 24))
(declare-fun x1 () (_ FloatingPoint 8 24))
(declare-fun x2 () (_ FloatingPoint 8 24))
(assert (let ((.def_16 (fp.leq x0 (fp #b0 #b10000001 #b01000000000000000000000))))
(let ((.def_15 (fp.leq (fp #b1 #b10000001 #b01000000000000000000000) x0)))
(let ((.def_17 (and .def_15 .def_16)))
.def_17))))
(assert (let ((.def_20 (fp.leq x1 (fp #b0 #b10000001 #b01000000000000000000000))))
(let ((.def_19 (fp.leq (fp #b1 #b10000001 #b01000000000000000000000) x1)))
(let ((.def_21 (and .def_19 .def_20)))
.def_21))))
(assert (let ((.def_24 (fp.leq x2 (fp #b0 #b10000001 #b01000000000000000000000))))
(let ((.def_23 (fp.leq (fp #b1 #b10000001 #b01000000000000000000000) x2)))
(let ((.def_25 (and .def_23 .def_24)))
.def_25))))
(assert (let ((.def_45 (fp.mul RNE x2 (fp #b1 #b01111100 #b10010101100000010000011))))
(let ((.def_40 (fp.mul RNE x1 (fp #b0 #b01111011 #b10010001011010000111001))))
(let ((.def_36 (fp.mul RNE x0 (fp #b1 #b01111100 #b11110101110000101001000))))
(let ((.def_37 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_36)))
(let ((.def_41 (fp.add RNE .def_37 .def_40)))
(let ((.def_46 (fp.add RNE .def_41 .def_45)))
(let ((.def_47 (fp.leq .def_46 (fp #b1 #b01111110 #b11010110000001000001100))))
.def_47))))))))
(assert (let ((.def_62 (fp.mul RNE x2 (fp #b0 #b01111110 #b00010011011101001011110))))
(let ((.def_58 (fp.mul RNE x1 (fp #b0 #b01111110 #b10000111001010110000001))))
(let ((.def_54 (fp.mul RNE x0 (fp #b1 #b01110101 #b00000110001001001101111))))
(let ((.def_55 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_54)))
(let ((.def_59 (fp.add RNE .def_55 .def_58)))
(let ((.def_63 (fp.add RNE .def_59 .def_62)))
(let ((.def_64 (fp.leq .def_63 (fp #b1 #b01111110 #b11011001000101101000100))))
.def_64))))))))
(assert (let ((.def_80 (fp.mul RNE x2 (fp #b1 #b01111110 #b11100010010011011101001))))
(let ((.def_75 (fp.mul RNE x1 (fp #b0 #b01111110 #b00001010001111010111000))))
(let ((.def_71 (fp.mul RNE x0 (fp #b1 #b01111110 #b01010011011101001011110))))
(let ((.def_72 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_71)))
(let ((.def_76 (fp.add RNE .def_72 .def_75)))
(let ((.def_81 (fp.add RNE .def_76 .def_80)))
(let ((.def_82 (fp.leq (fp #b1 #b01111101 #b11000110101001111111000) .def_81)))
.def_82))))))))
(assert (let ((.def_95 (fp.mul RNE x2 (fp #b0 #b01111101 #b00011000100100110111010))))
(let ((.def_91 (fp.mul RNE x1 (fp #b0 #b01111110 #b01100000110001001001110))))
(let ((.def_87 (fp.mul RNE x0 (fp #b0 #b01111010 #b01100000010000011000101))))
(let ((.def_88 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_87)))
(let ((.def_92 (fp.add RNE .def_88 .def_91)))
(let ((.def_96 (fp.add RNE .def_92 .def_95)))
(let ((.def_97 (fp.leq (fp #b0 #b01111101 #b00010000011000100100111) .def_96)))
.def_97))))))))
(assert (let ((.def_112 (fp.mul RNE x2 (fp #b0 #b01111110 #b11011101101100100010111))))
(let ((.def_108 (fp.mul RNE x1 (fp #b1 #b01111101 #b10010011011101001011110))))
(let ((.def_103 (fp.mul RNE x0 (fp #b1 #b01111110 #b11101000111101011100001))))
(let ((.def_104 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_103)))
(let ((.def_109 (fp.add RNE .def_104 .def_108)))
(let ((.def_113 (fp.add RNE .def_109 .def_112)))
(let ((.def_114 (fp.leq (fp #b0 #b01111010 #b01001111110111110011110) .def_113)))
.def_114))))))))
(assert (let ((.def_131 (fp.mul RNE x2 (fp #b1 #b01111110 #b00110100101111000110101))))
(let ((.def_126 (fp.mul RNE x1 (fp #b1 #b01111101 #b10011101101100100010111))))
(let ((.def_121 (fp.mul RNE x0 (fp #b1 #b01111100 #b01000111101011100001010))))
(let ((.def_122 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_121)))
(let ((.def_127 (fp.add RNE .def_122 .def_126)))
(let ((.def_132 (fp.add RNE .def_127 .def_131)))
(let ((.def_133 (fp.leq .def_132 (fp #b1 #b01111110 #b00100010110100001110011))))
.def_133))))))))
(assert (let ((.def_148 (fp.mul RNE x2 (fp #b0 #b01111110 #b01110001101010011111110))))
(let ((.def_144 (fp.mul RNE x1 (fp #b1 #b01111110 #b11011010000111001010110))))
(let ((.def_139 (fp.mul RNE x0 (fp #b1 #b01111110 #b10011111001110110110010))))
(let ((.def_140 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_139)))
(let ((.def_145 (fp.add RNE .def_140 .def_144)))
(let ((.def_149 (fp.add RNE .def_145 .def_148)))
(let ((.def_150 (fp.leq (fp #b0 #b01111110 #b01011000100100110111010) .def_149)))
.def_150))))))))
(assert (let ((.def_166 (fp.mul RNE x2 (fp #b1 #b01111110 #b11011111101111100111011))))
(let ((.def_161 (fp.mul RNE x1 (fp #b1 #b01111011 #b01001011110001101010100))))
(let ((.def_156 (fp.mul RNE x0 (fp #b1 #b01111010 #b11000010100011110101110))))
(let ((.def_157 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_156)))
(let ((.def_162 (fp.add RNE .def_157 .def_161)))
(let ((.def_167 (fp.add RNE .def_162 .def_166)))
(let ((.def_168 (fp.leq (fp #b0 #b01111011 #b11101111100111011011001) .def_167)))
.def_168))))))))
(check-sat)
