(declare-sort U0 0)
(declare-fun x () (_ FloatingPoint 8 24))
(declare-fun y () (_ FloatingPoint 8 24))
(assert (let ((.def_33 (fp.mul RNE y y)))
(let ((.def_34 (fp.mul RNE y .def_33)))
(let ((.def_30 (fp.mul RNE x x)))
(let ((.def_31 (fp.mul RNE x .def_30)))
(let ((.def_35 (fp.add RNE .def_31 .def_34)))
(let ((.def_36 (fp.mul RNE x y)))
(let ((.def_37 (fp.mul RNE (fp #b0 #b10000000 #b10000000000000000000000) .def_36)))
(let ((.def_38 (fp.leq .def_37 .def_35)))
.def_38)))))))))
(assert (let ((.def_33 (fp.mul RNE y y)))
(let ((.def_30 (fp.mul RNE x x)))
(let ((.def_39 (fp.add RNE .def_30 .def_33)))
(let ((.def_40 (fp.leq (fp #b0 #b01111011 #b10011001100110011001101) .def_39)))
.def_40)))))
(assert (let ((.def_36 (fp.mul RNE x y)))
(let ((.def_45 (fp.mul RNE (fp #b0 #b10000001 #b00000000000000000000000) .def_36)))
(let ((.def_41 (fp.add RNE (fp #b0 #b01111111 #b00000000000000000000000) x)))
(let ((.def_42 (fp.mul RNE x .def_41)))
(let ((.def_33 (fp.mul RNE y y)))
(let ((.def_43 (fp.add RNE .def_33 .def_42)))
(let ((.def_30 (fp.mul RNE x x)))
(let ((.def_39 (fp.add RNE .def_30 .def_33)))
(let ((.def_44 (fp.mul RNE .def_39 .def_43)))
(let ((.def_46 (fp.leq .def_44 .def_45)))
.def_46)))))))))))
(assert (let ((.def_49 (fp.leq (fp #b1 #b10000000 #b10000000000000000000000) x)))
(let ((.def_48 (fp.leq x (fp #b0 #b10000000 #b10000000000000000000000))))
(let ((.def_50 (and .def_48 .def_49)))
.def_50))))
(assert (let ((.def_52 (fp.leq (fp #b1 #b10000000 #b10000000000000000000000) y)))
(let ((.def_51 (fp.leq y (fp #b0 #b10000000 #b10000000000000000000000))))
(let ((.def_53 (and .def_51 .def_52)))
.def_53))))
(check-sat)
