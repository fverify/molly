(declare-fun x0 () (_ FloatingPoint 8 24))
(declare-fun x1 () (_ FloatingPoint 8 24))
(declare-fun x2 () (_ FloatingPoint 8 24))
(assert (let ((.def_16 (fp.leq x0 (fp #b0 #b10000001 #b01000000000000000000000))))
(let ((.def_15 (fp.leq (fp #b1 #b10000001 #b01000000000000000000000) x0)))
(let ((.def_17 (and .def_15 .def_16)))
.def_17))))
(assert (let ((.def_20 (fp.leq x1 (fp #b0 #b10000001 #b01000000000000000000000))))
(let ((.def_19 (fp.leq (fp #b1 #b10000001 #b01000000000000000000000) x1)))
(let ((.def_21 (and .def_19 .def_20)))
.def_21))))
(assert (let ((.def_24 (fp.leq x2 (fp #b0 #b10000001 #b01000000000000000000000))))
(let ((.def_23 (fp.leq (fp #b1 #b10000001 #b01000000000000000000000) x2)))
(let ((.def_25 (and .def_23 .def_24)))
.def_25))))
(assert (let ((.def_44 (fp.mul RNE x2 (fp #b0 #b01111110 #b10110101001111110111110))))
(let ((.def_40 (fp.mul RNE x1 (fp #b1 #b01111010 #b11101011100001010001111))))
(let ((.def_35 (fp.mul RNE x0 (fp #b1 #b01111110 #b01001010110000001000010))))
(let ((.def_36 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_35)))
(let ((.def_41 (fp.add RNE .def_36 .def_40)))
(let ((.def_45 (fp.add RNE .def_41 .def_44)))
(let ((.def_46 (fp.leq (fp #b0 #b01111110 #b10010100111111011111010) .def_45)))
.def_46))))))))
(assert (let ((.def_61 (fp.mul RNE x2 (fp #b1 #b01111110 #b00101100000010000011001))))
(let ((.def_56 (fp.mul RNE x1 (fp #b0 #b01111110 #b10011100101011000000100))))
(let ((.def_52 (fp.mul RNE x0 (fp #b1 #b01111110 #b00110001001001101110101))))
(let ((.def_53 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_52)))
(let ((.def_57 (fp.add RNE .def_53 .def_56)))
(let ((.def_62 (fp.add RNE .def_57 .def_61)))
(let ((.def_63 (fp.leq (fp #b0 #b01111110 #b10011000100100110111010) .def_62)))
.def_63))))))))
(assert (let ((.def_78 (fp.mul RNE x2 (fp #b1 #b01111110 #b00111111011111001110111))))
(let ((.def_73 (fp.mul RNE x1 (fp #b0 #b01111110 #b01101001111110111110100))))
(let ((.def_69 (fp.mul RNE x0 (fp #b0 #b01111110 #b11011100001010001111011))))
(let ((.def_70 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_69)))
(let ((.def_74 (fp.add RNE .def_70 .def_73)))
(let ((.def_79 (fp.add RNE .def_74 .def_78)))
(let ((.def_80 (fp.leq (fp #b1 #b01111110 #b11100001010001111010111) .def_79)))
.def_80))))))))
(assert (let ((.def_96 (fp.mul RNE x2 (fp #b0 #b01111110 #b11111110111110011101110))))
(let ((.def_92 (fp.mul RNE x1 (fp #b1 #b01111101 #b01000111101011100001010))))
(let ((.def_87 (fp.mul RNE x0 (fp #b1 #b01111110 #b10111011111001110110110))))
(let ((.def_88 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_87)))
(let ((.def_93 (fp.add RNE .def_88 .def_92)))
(let ((.def_97 (fp.add RNE .def_93 .def_96)))
(let ((.def_98 (fp.leq .def_97 (fp #b1 #b01111110 #b00110110010001011010001))))
.def_98))))))))
(assert (let ((.def_110 (fp.mul RNE x2 (fp #b1 #b01111101 #b10111000010100011110110))))
(let ((.def_105 (fp.mul RNE x1 (fp #b1 #b01111110 #b00110001001001101110101))))
(let ((.def_103 (fp.mul RNE x0 (fp #b0 #b01111110 #b11001111010111000010100))))
(let ((.def_104 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_103)))
(let ((.def_106 (fp.add RNE .def_104 .def_105)))
(let ((.def_111 (fp.add RNE .def_106 .def_110)))
(let ((.def_112 (fp.leq (fp #b0 #b01111110 #b11101101000011100101011) .def_111)))
.def_112))))))))
(assert (let ((.def_127 (fp.mul RNE x2 (fp #b0 #b01111110 #b01010110000001000001100))))
(let ((.def_123 (fp.mul RNE x1 (fp #b1 #b01111110 #b11010011111101111100111))))
(let ((.def_118 (fp.mul RNE x0 (fp #b0 #b01111110 #b00001010110000001000010))))
(let ((.def_119 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_118)))
(let ((.def_124 (fp.add RNE .def_119 .def_123)))
(let ((.def_128 (fp.add RNE .def_124 .def_127)))
(let ((.def_129 (fp.leq (fp #b1 #b01111110 #b01101000111101011100001) .def_128)))
.def_129))))))))
(assert (let ((.def_144 (fp.mul RNE x2 (fp #b0 #b01110110 #b00000110001001001101111))))
(let ((.def_140 (fp.mul RNE x1 (fp #b0 #b01111101 #b11010000111001010110000))))
(let ((.def_136 (fp.mul RNE x0 (fp #b1 #b01111011 #b10011001100110011001101))))
(let ((.def_137 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_136)))
(let ((.def_141 (fp.add RNE .def_137 .def_140)))
(let ((.def_145 (fp.add RNE .def_141 .def_144)))
(let ((.def_146 (fp.leq .def_145 (fp #b1 #b01111101 #b01010011111101111100111))))
.def_146))))))))
(assert (let ((.def_160 (fp.mul RNE x2 (fp #b0 #b01111110 #b10001101010011111110000))))
(let ((.def_156 (fp.mul RNE x1 (fp #b0 #b01111101 #b01000110101001111111000))))
(let ((.def_152 (fp.mul RNE x0 (fp #b1 #b01111110 #b00100100110111010011000))))
(let ((.def_153 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_152)))
(let ((.def_157 (fp.add RNE .def_153 .def_156)))
(let ((.def_161 (fp.add RNE .def_157 .def_160)))
(let ((.def_162 (fp.leq .def_161 (fp #b0 #b01111110 #b01001000101101000011101))))
.def_162))))))))
(check-sat)
