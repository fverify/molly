(declare-fun x0 () (_ FloatingPoint 8 24))
(declare-fun x1 () (_ FloatingPoint 8 24))
(declare-fun x2 () (_ FloatingPoint 8 24))
(declare-fun x3 () (_ FloatingPoint 8 24))
(declare-fun x4 () (_ FloatingPoint 8 24))
(assert (let ((.def_16 (fp.leq x0 (fp #b0 #b10000001 #b01000000000000000000000))))
(let ((.def_15 (fp.leq (fp #b1 #b10000001 #b01000000000000000000000) x0)))
(let ((.def_17 (and .def_15 .def_16)))
.def_17))))
(assert (let ((.def_20 (fp.leq x1 (fp #b0 #b10000001 #b01000000000000000000000))))
(let ((.def_19 (fp.leq (fp #b1 #b10000001 #b01000000000000000000000) x1)))
(let ((.def_21 (and .def_19 .def_20)))
.def_21))))
(assert (let ((.def_24 (fp.leq x2 (fp #b0 #b10000001 #b01000000000000000000000))))
(let ((.def_23 (fp.leq (fp #b1 #b10000001 #b01000000000000000000000) x2)))
(let ((.def_25 (and .def_23 .def_24)))
.def_25))))
(assert (let ((.def_28 (fp.leq x3 (fp #b0 #b10000001 #b01000000000000000000000))))
(let ((.def_27 (fp.leq (fp #b1 #b10000001 #b01000000000000000000000) x3)))
(let ((.def_29 (and .def_27 .def_28)))
.def_29))))
(assert (let ((.def_32 (fp.leq x4 (fp #b0 #b10000001 #b01000000000000000000000))))
(let ((.def_31 (fp.leq (fp #b1 #b10000001 #b01000000000000000000000) x4)))
(let ((.def_33 (and .def_31 .def_32)))
.def_33))))
(assert (let ((.def_58 (fp.mul RNE x4 (fp #b0 #b01111110 #b10001110110110010001011))))
(let ((.def_54 (fp.mul RNE x3 (fp #b0 #b01111110 #b10010001111010111000011))))
(let ((.def_50 (fp.mul RNE x2 (fp #b0 #b01111110 #b01110100001110010101100))))
(let ((.def_46 (fp.mul RNE x1 (fp #b0 #b01111110 #b10001111010111000010100))))
(let ((.def_42 (fp.mul RNE x0 (fp #b0 #b01111110 #b11010000111001010110000))))
(let ((.def_43 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_42)))
(let ((.def_47 (fp.add RNE .def_43 .def_46)))
(let ((.def_51 (fp.add RNE .def_47 .def_50)))
(let ((.def_55 (fp.add RNE .def_51 .def_54)))
(let ((.def_59 (fp.add RNE .def_55 .def_58)))
(let ((.def_60 (fp.leq .def_59 (fp #b0 #b01111010 #b00110111010010111100011))))
.def_60))))))))))))
(assert (let ((.def_83 (fp.mul RNE x4 (fp #b0 #b01111100 #b00001000001100010010011))))
(let ((.def_79 (fp.mul RNE x3 (fp #b1 #b01111100 #b10001001001101110100110))))
(let ((.def_74 (fp.mul RNE x2 (fp #b0 #b01111110 #b11000001000001100010010))))
(let ((.def_70 (fp.mul RNE x1 (fp #b1 #b01111101 #b11010011111101111100111))))
(let ((.def_65 (fp.mul RNE x0 (fp #b0 #b01111110 #b00011111001110110110010))))
(let ((.def_66 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_65)))
(let ((.def_71 (fp.add RNE .def_66 .def_70)))
(let ((.def_75 (fp.add RNE .def_71 .def_74)))
(let ((.def_80 (fp.add RNE .def_75 .def_79)))
(let ((.def_84 (fp.add RNE .def_80 .def_83)))
(let ((.def_85 (fp.leq .def_84 (fp #b0 #b01111110 #b11110010101100000010000))))
.def_85))))))))))))
(assert (let ((.def_107 (fp.mul RNE x4 (fp #b1 #b01111110 #b10101010011111101111101))))
(let ((.def_102 (fp.mul RNE x3 (fp #b0 #b01111110 #b11100001010001111010111))))
(let ((.def_98 (fp.mul RNE x2 (fp #b0 #b01111110 #b00010101100000010000011))))
(let ((.def_94 (fp.mul RNE x1 (fp #b0 #b01111101 #b01111001110110110010001))))
(let ((.def_90 (fp.mul RNE x0 (fp #b0 #b01111110 #b01100101011000000100001))))
(let ((.def_91 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_90)))
(let ((.def_95 (fp.add RNE .def_91 .def_94)))
(let ((.def_99 (fp.add RNE .def_95 .def_98)))
(let ((.def_103 (fp.add RNE .def_99 .def_102)))
(let ((.def_108 (fp.add RNE .def_103 .def_107)))
(let ((.def_109 (fp.leq .def_108 (fp #b0 #b01111011 #b00001110010101100000010))))
.def_109))))))))))))
(assert (let ((.def_131 (fp.mul RNE x4 (fp #b1 #b01111100 #b10010011011101001011110))))
(let ((.def_126 (fp.mul RNE x3 (fp #b0 #b01111110 #b11000110001001001101111))))
(let ((.def_122 (fp.mul RNE x2 (fp #b1 #b01111110 #b11100001010001111010111))))
(let ((.def_119 (fp.mul RNE x1 (fp #b1 #b01111101 #b11100110011001100110011))))
(let ((.def_114 (fp.mul RNE x0 (fp #b0 #b01111100 #b00100110111010010111100))))
(let ((.def_115 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_114)))
(let ((.def_120 (fp.add RNE .def_115 .def_119)))
(let ((.def_123 (fp.add RNE .def_120 .def_122)))
(let ((.def_127 (fp.add RNE .def_123 .def_126)))
(let ((.def_132 (fp.add RNE .def_127 .def_131)))
(let ((.def_133 (fp.leq .def_132 (fp #b0 #b01111110 #b01101100100010110100010))))
.def_133))))))))))))
(assert (let ((.def_157 (fp.mul RNE x4 (fp #b0 #b01111110 #b11010111000010100011111))))
(let ((.def_153 (fp.mul RNE x3 (fp #b0 #b01111101 #b10001101010011111110000))))
(let ((.def_149 (fp.mul RNE x2 (fp #b1 #b01111101 #b00010111100011010101000))))
(let ((.def_144 (fp.mul RNE x1 (fp #b0 #b01111101 #b11000111101011100001010))))
(let ((.def_140 (fp.mul RNE x0 (fp #b1 #b01111110 #b00001001001101110100110))))
(let ((.def_141 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_140)))
(let ((.def_145 (fp.add RNE .def_141 .def_144)))
(let ((.def_150 (fp.add RNE .def_145 .def_149)))
(let ((.def_154 (fp.add RNE .def_150 .def_153)))
(let ((.def_158 (fp.add RNE .def_154 .def_157)))
(let ((.def_159 (fp.leq .def_158 (fp #b1 #b01111100 #b00001010001111010111000))))
.def_159))))))))))))
(assert (let ((.def_185 (fp.mul RNE x4 (fp #b1 #b01111100 #b10100011110101110000101))))
(let ((.def_180 (fp.mul RNE x3 (fp #b1 #b01111110 #b10000001000001100010010))))
(let ((.def_175 (fp.mul RNE x2 (fp #b1 #b01111110 #b11011100101011000000100))))
(let ((.def_170 (fp.mul RNE x1 (fp #b0 #b01111110 #b10111100011010100111111))))
(let ((.def_166 (fp.mul RNE x0 (fp #b1 #b01111110 #b01001101110100101111001))))
(let ((.def_167 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_166)))
(let ((.def_171 (fp.add RNE .def_167 .def_170)))
(let ((.def_176 (fp.add RNE .def_171 .def_175)))
(let ((.def_181 (fp.add RNE .def_176 .def_180)))
(let ((.def_186 (fp.add RNE .def_181 .def_185)))
(let ((.def_187 (fp.leq .def_186 (fp #b1 #b01111101 #b00100101111000110101010))))
.def_187))))))))))))
(assert (let ((.def_206 (fp.mul RNE (fp #b0 #b00000000 #b00000000000000000000000) x4)))
(let ((.def_204 (fp.mul RNE x3 (fp #b0 #b01111101 #b11011110001101010100000))))
(let ((.def_200 (fp.mul RNE x2 (fp #b0 #b01111011 #b10101001111110111110100))))
(let ((.def_196 (fp.mul RNE x1 (fp #b1 #b01111011 #b00001010001111010111000))))
(let ((.def_191 (fp.mul RNE x0 (fp #b1 #b01111011 #b00110111010010111100011))))
(let ((.def_192 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_191)))
(let ((.def_197 (fp.add RNE .def_192 .def_196)))
(let ((.def_201 (fp.add RNE .def_197 .def_200)))
(let ((.def_205 (fp.add RNE .def_201 .def_204)))
(let ((.def_207 (fp.add RNE .def_205 .def_206)))
(let ((.def_208 (fp.leq .def_207 (fp #b0 #b01111100 #b00001000001100010010011))))
.def_208))))))))))))
(assert (let ((.def_229 (fp.mul RNE x4 (fp #b0 #b01111110 #b01111111011111001110111))))
(let ((.def_225 (fp.mul RNE x3 (fp #b0 #b01111110 #b01111101111100111011011))))
(let ((.def_221 (fp.mul RNE x2 (fp #b0 #b01111011 #b01011000000100000110001))))
(let ((.def_217 (fp.mul RNE x1 (fp #b1 #b01111100 #b10111110011101101100100))))
(let ((.def_212 (fp.mul RNE x0 (fp #b1 #b01111011 #b11001010110000001000010))))
(let ((.def_213 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_212)))
(let ((.def_218 (fp.add RNE .def_213 .def_217)))
(let ((.def_222 (fp.add RNE .def_218 .def_221)))
(let ((.def_226 (fp.add RNE .def_222 .def_225)))
(let ((.def_230 (fp.add RNE .def_226 .def_229)))
(let ((.def_231 (fp.leq .def_230 (fp #b0 #b01111011 #b10101001111110111110100))))
.def_231))))))))))))
(assert (let ((.def_250 (fp.mul RNE x4 (fp #b0 #b01111110 #b01011111001110110110010))))
(let ((.def_246 (fp.mul RNE x3 (fp #b0 #b01111101 #b00000010000011000100101))))
(let ((.def_242 (fp.mul RNE x2 (fp #b0 #b01111101 #b10110010001011010000111))))
(let ((.def_238 (fp.mul RNE x1 (fp #b0 #b01111100 #b00001000001100010010011))))
(let ((.def_236 (fp.mul RNE x0 (fp #b0 #b01111110 #b00001111010111000010100))))
(let ((.def_237 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_236)))
(let ((.def_239 (fp.add RNE .def_237 .def_238)))
(let ((.def_243 (fp.add RNE .def_239 .def_242)))
(let ((.def_247 (fp.add RNE .def_243 .def_246)))
(let ((.def_251 (fp.add RNE .def_247 .def_250)))
(let ((.def_252 (fp.leq .def_251 (fp #b0 #b01111101 #b10011110101110000101001))))
.def_252))))))))))))
(assert (let ((.def_275 (fp.mul RNE x4 (fp #b0 #b01111101 #b01100101011000000100001))))
(let ((.def_271 (fp.mul RNE x3 (fp #b1 #b01111110 #b01100111011011001000110))))
(let ((.def_266 (fp.mul RNE x2 (fp #b1 #b01111110 #b00001110110110010001011))))
(let ((.def_261 (fp.mul RNE x1 (fp #b1 #b01111101 #b10111010010111100011011))))
(let ((.def_256 (fp.mul RNE x0 (fp #b0 #b01111011 #b01011000000100000110001))))
(let ((.def_257 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_256)))
(let ((.def_262 (fp.add RNE .def_257 .def_261)))
(let ((.def_267 (fp.add RNE .def_262 .def_266)))
(let ((.def_272 (fp.add RNE .def_267 .def_271)))
(let ((.def_276 (fp.add RNE .def_272 .def_275)))
(let ((.def_277 (fp.leq (fp #b1 #b01111011 #b11110111110011101101101) .def_276)))
.def_277))))))))))))
(check-sat)
