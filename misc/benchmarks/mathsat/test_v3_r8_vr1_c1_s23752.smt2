(declare-fun x0 () (_ FloatingPoint 8 24))
(declare-fun x1 () (_ FloatingPoint 8 24))
(declare-fun x2 () (_ FloatingPoint 8 24))
(assert (let ((.def_16 (fp.leq x0 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_15 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x0)))
(let ((.def_17 (and .def_15 .def_16)))
.def_17))))
(assert (let ((.def_20 (fp.leq x1 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_19 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x1)))
(let ((.def_21 (and .def_19 .def_20)))
.def_21))))
(assert (let ((.def_24 (fp.leq x2 (fp #b0 #b01111111 #b00000000000000000000000))))
(let ((.def_23 (fp.leq (fp #b1 #b01111111 #b00000000000000000000000) x2)))
(let ((.def_25 (and .def_23 .def_24)))
.def_25))))
(assert (let ((.def_44 (fp.mul RNE x2 (fp #b1 #b01111010 #b11101011100001010001111))))
(let ((.def_39 (fp.mul RNE x1 (fp #b1 #b01111110 #b00001010001111010111000))))
(let ((.def_34 (fp.mul RNE x0 (fp #b0 #b01111101 #b01000011100101011000001))))
(let ((.def_35 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_34)))
(let ((.def_40 (fp.add RNE .def_35 .def_39)))
(let ((.def_45 (fp.add RNE .def_40 .def_44)))
(let ((.def_46 (fp.leq .def_45 (fp #b0 #b01111010 #b10101001111110111110100))))
.def_46))))))))
(assert (let ((.def_62 (fp.mul RNE x2 (fp #b1 #b01111101 #b01100111011011001000110))))
(let ((.def_57 (fp.mul RNE x1 (fp #b1 #b01111100 #b00010000011000100100111))))
(let ((.def_52 (fp.mul RNE x0 (fp #b1 #b01111110 #b11101101100100010110100))))
(let ((.def_53 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_52)))
(let ((.def_58 (fp.add RNE .def_53 .def_57)))
(let ((.def_63 (fp.add RNE .def_58 .def_62)))
(let ((.def_64 (fp.leq .def_63 (fp #b0 #b01111100 #b00001010001111010111000))))
.def_64))))))))
(assert (let ((.def_79 (fp.mul RNE x2 (fp #b1 #b01111101 #b11010011111101111100111))))
(let ((.def_74 (fp.mul RNE x1 (fp #b0 #b01111000 #b00100110111010010111100))))
(let ((.def_70 (fp.mul RNE x0 (fp #b1 #b01111101 #b00111101011100001010010))))
(let ((.def_71 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_70)))
(let ((.def_75 (fp.add RNE .def_71 .def_74)))
(let ((.def_80 (fp.add RNE .def_75 .def_79)))
(let ((.def_81 (fp.leq .def_80 (fp #b0 #b01111101 #b01101011100001010001111))))
.def_81))))))))
(assert (let ((.def_94 (fp.mul RNE x2 (fp #b0 #b01111110 #b00111010111000010100100))))
(let ((.def_90 (fp.mul RNE x1 (fp #b0 #b01111101 #b01100111011011001000110))))
(let ((.def_88 (fp.mul RNE x0 (fp #b1 #b01111011 #b10010001011010000111001))))
(let ((.def_89 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_88)))
(let ((.def_91 (fp.add RNE .def_89 .def_90)))
(let ((.def_95 (fp.add RNE .def_91 .def_94)))
(let ((.def_96 (fp.leq .def_95 (fp #b1 #b01111110 #b00101011100001010001111))))
.def_96))))))))
(assert (let ((.def_111 (fp.mul RNE x2 (fp #b1 #b01111110 #b01010010111100011010101))))
(let ((.def_106 (fp.mul RNE x1 (fp #b1 #b01111100 #b01000001100010010011100))))
(let ((.def_101 (fp.mul RNE x0 (fp #b0 #b01111100 #b11001100110011001100110))))
(let ((.def_102 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_101)))
(let ((.def_107 (fp.add RNE .def_102 .def_106)))
(let ((.def_112 (fp.add RNE .def_107 .def_111)))
(let ((.def_113 (fp.leq .def_112 (fp #b0 #b01111110 #b10001010001111010111000))))
.def_113))))))))
(assert (let ((.def_128 (fp.mul RNE x2 (fp #b1 #b01111101 #b01110000101000111101100))))
(let ((.def_123 (fp.mul RNE x1 (fp #b0 #b01111110 #b00001101110100101111001))))
(let ((.def_119 (fp.mul RNE x0 (fp #b1 #b01111101 #b11100101011000000100001))))
(let ((.def_120 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_119)))
(let ((.def_124 (fp.add RNE .def_120 .def_123)))
(let ((.def_129 (fp.add RNE .def_124 .def_128)))
(let ((.def_130 (fp.leq (fp #b0 #b01111101 #b10100100110111010011000) .def_129)))
.def_130))))))))
(assert (let ((.def_147 (fp.mul RNE x2 (fp #b1 #b01111101 #b10000111001010110000001))))
(let ((.def_142 (fp.mul RNE x1 (fp #b1 #b01111101 #b01101001011110001101010))))
(let ((.def_137 (fp.mul RNE x0 (fp #b1 #b01111011 #b11000110101001111111000))))
(let ((.def_138 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_137)))
(let ((.def_143 (fp.add RNE .def_138 .def_142)))
(let ((.def_148 (fp.add RNE .def_143 .def_147)))
(let ((.def_149 (fp.leq (fp #b1 #b01111100 #b00111011011001000101101) .def_148)))
.def_149))))))))
(assert (let ((.def_163 (fp.mul RNE x2 (fp #b0 #b01111100 #b10011001100110011001101))))
(let ((.def_159 (fp.mul RNE x1 (fp #b0 #b01111101 #b10011111101111100111011))))
(let ((.def_155 (fp.mul RNE x0 (fp #b1 #b01111011 #b00011110101110000101001))))
(let ((.def_156 (fp.add RNE (fp #b0 #b00000000 #b00000000000000000000000) .def_155)))
(let ((.def_160 (fp.add RNE .def_156 .def_159)))
(let ((.def_164 (fp.add RNE .def_160 .def_163)))
(let ((.def_165 (fp.leq (fp #b0 #b01111110 #b10100000010000011000101) .def_164)))
.def_165))))))))
(check-sat)
