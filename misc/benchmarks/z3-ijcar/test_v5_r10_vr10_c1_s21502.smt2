(declare-fun lit_x0 () (_ FloatingPoint 8 24))
(assert (fp.isNormal lit_x0))
(declare-fun lit_x1 () (_ FloatingPoint 8 24))
(assert (fp.isNormal lit_x1))
(declare-fun lit_x2 () (_ FloatingPoint 8 24))
(assert (fp.isNormal lit_x2))
(define-fun lit_10 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 5.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_13 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 5.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun const_0 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_14 () (_ FloatingPoint 8 24) (fp.add RNE lit_x0 const_0))
(assert (fp.isNormal lit_14))
(define-fun lit_15 () Bool (fp.leq lit_13 lit_14))
(define-fun lit_16 () Bool (fp.leq lit_14 lit_10))
(define-fun lit_17 () Bool (and lit_15 lit_16))
(define-fun lit_18 () (_ FloatingPoint 8 24) (fp.add RNE lit_x1 const_0))
(assert (fp.isNormal lit_18))
(define-fun lit_19 () Bool (fp.leq lit_13 lit_18))
(define-fun lit_20 () Bool (fp.leq lit_18 lit_10))
(define-fun lit_21 () Bool (and lit_19 lit_20))
(define-fun lit_22 () (_ FloatingPoint 8 24) (fp.add RNE lit_x2 const_0))
(assert (fp.isNormal lit_22))
(define-fun lit_23 () Bool (fp.leq lit_13 lit_22))
(define-fun lit_24 () Bool (fp.leq lit_22 lit_10))
(define-fun lit_25 () Bool (and lit_23 lit_24))
(define-fun lit_12 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_32 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.917999982833862304687500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_35 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.245000004768371582031250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_36 () (_ FloatingPoint 8 24) (fp.mul RNE lit_14 lit_35))
(assert (fp.isNormal lit_36))
(define-fun lit_37 () (_ FloatingPoint 8 24) (fp.add RNE lit_12 lit_36))
(assert (fp.isNormal lit_37))
(define-fun lit_39 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.097999997437000274658203125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_40 () (_ FloatingPoint 8 24) (fp.mul RNE lit_18 lit_39))
(assert (fp.isNormal lit_40))
(define-fun lit_41 () (_ FloatingPoint 8 24) (fp.add RNE lit_37 lit_40))
(assert (fp.isNormal lit_41))
(define-fun lit_44 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.197999998927116394042968750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_45 () (_ FloatingPoint 8 24) (fp.mul RNE lit_22 lit_44))
(assert (fp.isNormal lit_45))
(define-fun lit_46 () (_ FloatingPoint 8 24) (fp.add RNE lit_41 lit_45))
(assert (fp.isNormal lit_46))
(define-fun lit_47 () Bool (fp.leq lit_46 lit_32))
(define-fun lit_50 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.924000024795532226562500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_53 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.001000000047497451305389404296875000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_54 () (_ FloatingPoint 8 24) (fp.mul RNE lit_14 lit_53))
(assert (fp.isNormal lit_54))
(define-fun lit_55 () (_ FloatingPoint 8 24) (fp.add RNE lit_12 lit_54))
(assert (fp.isNormal lit_55))
(define-fun lit_57 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.763999998569488525390625000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_58 () (_ FloatingPoint 8 24) (fp.mul RNE lit_18 lit_57))
(assert (fp.isNormal lit_58))
(define-fun lit_59 () (_ FloatingPoint 8 24) (fp.add RNE lit_55 lit_58))
(assert (fp.isNormal lit_59))
(define-fun lit_61 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.537999987602233886718750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_62 () (_ FloatingPoint 8 24) (fp.mul RNE lit_22 lit_61))
(assert (fp.isNormal lit_62))
(define-fun lit_63 () (_ FloatingPoint 8 24) (fp.add RNE lit_59 lit_62))
(assert (fp.isNormal lit_63))
(define-fun lit_64 () Bool (fp.leq lit_63 lit_50))
(define-fun lit_67 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.444000005722045898437500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_70 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.662999987602233886718750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_71 () (_ FloatingPoint 8 24) (fp.mul RNE lit_14 lit_70))
(assert (fp.isNormal lit_71))
(define-fun lit_72 () (_ FloatingPoint 8 24) (fp.add RNE lit_12 lit_71))
(assert (fp.isNormal lit_72))
(define-fun lit_74 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.519999980926513671875000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_75 () (_ FloatingPoint 8 24) (fp.mul RNE lit_18 lit_74))
(assert (fp.isNormal lit_75))
(define-fun lit_76 () (_ FloatingPoint 8 24) (fp.add RNE lit_72 lit_75))
(assert (fp.isNormal lit_76))
(define-fun lit_79 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.941999971866607666015625000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_80 () (_ FloatingPoint 8 24) (fp.mul RNE lit_22 lit_79))
(assert (fp.isNormal lit_80))
(define-fun lit_81 () (_ FloatingPoint 8 24) (fp.add RNE lit_76 lit_80))
(assert (fp.isNormal lit_81))
(define-fun lit_82 () Bool (fp.leq lit_67 lit_81))
(define-fun lit_84 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.266000002622604370117187500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_86 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.043000001460313796997070312500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_87 () (_ FloatingPoint 8 24) (fp.mul RNE lit_14 lit_86))
(assert (fp.isNormal lit_87))
(define-fun lit_88 () (_ FloatingPoint 8 24) (fp.add RNE lit_12 lit_87))
(assert (fp.isNormal lit_88))
(define-fun lit_90 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.689000010490417480468750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_91 () (_ FloatingPoint 8 24) (fp.mul RNE lit_18 lit_90))
(assert (fp.isNormal lit_91))
(define-fun lit_92 () (_ FloatingPoint 8 24) (fp.add RNE lit_88 lit_91))
(assert (fp.isNormal lit_92))
(define-fun lit_94 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.273999989032745361328125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_95 () (_ FloatingPoint 8 24) (fp.mul RNE lit_22 lit_94))
(assert (fp.isNormal lit_95))
(define-fun lit_96 () (_ FloatingPoint 8 24) (fp.add RNE lit_92 lit_95))
(assert (fp.isNormal lit_96))
(define-fun lit_97 () Bool (fp.leq lit_84 lit_96))
(define-fun lit_99 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.041000001132488250732421875000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_102 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.954999983310699462890625000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_103 () (_ FloatingPoint 8 24) (fp.mul RNE lit_14 lit_102))
(assert (fp.isNormal lit_103))
(define-fun lit_104 () (_ FloatingPoint 8 24) (fp.add RNE lit_12 lit_103))
(assert (fp.isNormal lit_104))
(define-fun lit_107 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.393999993801116943359375000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_108 () (_ FloatingPoint 8 24) (fp.mul RNE lit_18 lit_107))
(assert (fp.isNormal lit_108))
(define-fun lit_109 () (_ FloatingPoint 8 24) (fp.add RNE lit_104 lit_108))
(assert (fp.isNormal lit_109))
(define-fun lit_111 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.933000028133392333984375000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_112 () (_ FloatingPoint 8 24) (fp.mul RNE lit_22 lit_111))
(assert (fp.isNormal lit_112))
(define-fun lit_113 () (_ FloatingPoint 8 24) (fp.add RNE lit_109 lit_112))
(assert (fp.isNormal lit_113))
(define-fun lit_114 () Bool (fp.leq lit_99 lit_113))
(define-fun lit_117 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.568000018596649169921875000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_120 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.159999996423721313476562500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_121 () (_ FloatingPoint 8 24) (fp.mul RNE lit_14 lit_120))
(assert (fp.isNormal lit_121))
(define-fun lit_122 () (_ FloatingPoint 8 24) (fp.add RNE lit_12 lit_121))
(assert (fp.isNormal lit_122))
(define-fun lit_125 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.404000014066696166992187500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_126 () (_ FloatingPoint 8 24) (fp.mul RNE lit_18 lit_125))
(assert (fp.isNormal lit_126))
(define-fun lit_127 () (_ FloatingPoint 8 24) (fp.add RNE lit_122 lit_126))
(assert (fp.isNormal lit_127))
(define-fun lit_130 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.602999985218048095703125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_131 () (_ FloatingPoint 8 24) (fp.mul RNE lit_22 lit_130))
(assert (fp.isNormal lit_131))
(define-fun lit_132 () (_ FloatingPoint 8 24) (fp.add RNE lit_127 lit_131))
(assert (fp.isNormal lit_132))
(define-fun lit_133 () Bool (fp.leq lit_132 lit_117))
(define-fun lit_135 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.672999978065490722656250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_138 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.810999989509582519531250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_139 () (_ FloatingPoint 8 24) (fp.mul RNE lit_14 lit_138))
(assert (fp.isNormal lit_139))
(define-fun lit_140 () (_ FloatingPoint 8 24) (fp.add RNE lit_12 lit_139))
(assert (fp.isNormal lit_140))
(define-fun lit_143 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.925999999046325683593750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_144 () (_ FloatingPoint 8 24) (fp.mul RNE lit_18 lit_143))
(assert (fp.isNormal lit_144))
(define-fun lit_145 () (_ FloatingPoint 8 24) (fp.add RNE lit_140 lit_144))
(assert (fp.isNormal lit_145))
(define-fun lit_147 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.722000002861022949218750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_148 () (_ FloatingPoint 8 24) (fp.mul RNE lit_22 lit_147))
(assert (fp.isNormal lit_148))
(define-fun lit_149 () (_ FloatingPoint 8 24) (fp.add RNE lit_145 lit_148))
(assert (fp.isNormal lit_149))
(define-fun lit_150 () Bool (fp.leq lit_135 lit_149))
(define-fun lit_152 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.120999999344348907470703125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_155 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.054999999701976776123046875000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_156 () (_ FloatingPoint 8 24) (fp.mul RNE lit_14 lit_155))
(assert (fp.isNormal lit_156))
(define-fun lit_157 () (_ FloatingPoint 8 24) (fp.add RNE lit_12 lit_156))
(assert (fp.isNormal lit_157))
(define-fun lit_160 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.081000000238418579101562500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_161 () (_ FloatingPoint 8 24) (fp.mul RNE lit_18 lit_160))
(assert (fp.isNormal lit_161))
(define-fun lit_162 () (_ FloatingPoint 8 24) (fp.add RNE lit_157 lit_161))
(assert (fp.isNormal lit_162))
(define-fun lit_165 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.936999976634979248046875000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_166 () (_ FloatingPoint 8 24) (fp.mul RNE lit_22 lit_165))
(assert (fp.isNormal lit_166))
(define-fun lit_167 () (_ FloatingPoint 8 24) (fp.add RNE lit_162 lit_166))
(assert (fp.isNormal lit_167))
(define-fun lit_168 () Bool (fp.leq lit_152 lit_167))
(define-fun top_level_new0 () Bool (and lit_168 lit_47))
(define-fun top_level_new1 () Bool (and top_level_new0 lit_82))
(define-fun top_level_new2 () Bool (and top_level_new1 lit_97))
(define-fun top_level_new3 () Bool (and top_level_new2 lit_25))
(define-fun top_level_new4 () Bool (and top_level_new3 lit_150))
(define-fun top_level_new5 () Bool (and top_level_new4 lit_21))
(define-fun top_level_new6 () Bool (and top_level_new5 lit_17))
(define-fun top_level_new7 () Bool (and top_level_new6 lit_133))
(define-fun top_level_new8 () Bool (and top_level_new7 lit_114))
(define-fun propexp () Bool (and top_level_new8 lit_64))
(assert propexp)
(apply fpa2bv_approx)
(check-sat)
;(get-model)
(exit)