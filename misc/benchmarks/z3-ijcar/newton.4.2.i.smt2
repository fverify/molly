(declare-fun lit_9 () (_ FloatingPoint 8 24))
(assert (fp.isNormal lit_9))
(define-fun lit_11 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.400000005960464477539062500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_12 () Bool (fp.lt lit_9 lit_11))
(define-fun lit_14 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.400000005960464477539062500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_15 () Bool (fp.lt lit_14 lit_9))
(define-fun lit_16 () Bool (and lit_12 lit_15))
(define-fun lit_17 () (_ FloatingPoint 8 24) (fp.mul RNE lit_9 lit_9))
(assert (fp.isNormal lit_17))
(define-fun lit_19 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 2.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_20 () (_ FloatingPoint 8 24) (fp.div RNE lit_17 lit_19))
(assert (fp.isNormal lit_20))
(define-fun lit_const_minus_1 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 1.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_21 () (_ FloatingPoint 8 24) (fp.mul RNE lit_const_minus_1 lit_20))
(assert (fp.isNormal lit_21))
(define-fun lit_23 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 1.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_24 () (_ FloatingPoint 8 24) (fp.add RNE lit_21 lit_23))
(assert (fp.isNormal lit_24))
(define-fun lit_25 () (_ FloatingPoint 8 24) (fp.mul RNE lit_9 lit_17))
(assert (fp.isNormal lit_25))
(define-fun lit_26 () (_ FloatingPoint 8 24) (fp.mul RNE lit_9 lit_25))
(assert (fp.isNormal lit_26))
(define-fun lit_28 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 24.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_29 () (_ FloatingPoint 8 24) (fp.div RNE lit_26 lit_28))
(assert (fp.isNormal lit_29))
(define-fun lit_30 () (_ FloatingPoint 8 24) (fp.add RNE lit_24 lit_29))
(assert (fp.isNormal lit_30))
(define-fun lit_31 () (_ FloatingPoint 8 24) (fp.mul RNE lit_9 lit_26))
(assert (fp.isNormal lit_31))
(define-fun lit_32 () (_ FloatingPoint 8 24) (fp.mul RNE lit_9 lit_31))
(assert (fp.isNormal lit_32))
(define-fun lit_34 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 720.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_35 () (_ FloatingPoint 8 24) (fp.div RNE lit_32 lit_34))
(assert (fp.isNormal lit_35))
(define-fun lit_36 () (_ FloatingPoint 8 24) (fp.add RNE lit_30 lit_35))
(assert (fp.isNormal lit_36))
(define-fun lit_38 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 6.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_39 () (_ FloatingPoint 8 24) (fp.div RNE lit_25 lit_38))
(assert (fp.isNormal lit_39))
(define-fun lit_40 () (_ FloatingPoint 8 24) (fp.mul RNE lit_const_minus_1 lit_39))
(assert (fp.isNormal lit_40))
(define-fun lit_41 () (_ FloatingPoint 8 24) (fp.add RNE lit_9 lit_40))
(assert (fp.isNormal lit_41))
(define-fun lit_43 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 120.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_44 () (_ FloatingPoint 8 24) (fp.div RNE lit_31 lit_43))
(assert (fp.isNormal lit_44))
(define-fun lit_45 () (_ FloatingPoint 8 24) (fp.add RNE lit_41 lit_44))
(assert (fp.isNormal lit_45))
(define-fun lit_46 () (_ FloatingPoint 8 24) (fp.mul RNE lit_9 lit_32))
(assert (fp.isNormal lit_46))
(define-fun lit_48 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 5040.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_49 () (_ FloatingPoint 8 24) (fp.div RNE lit_46 lit_48))
(assert (fp.isNormal lit_49))
(define-fun lit_50 () (_ FloatingPoint 8 24) (fp.add RNE lit_45 lit_49))
(assert (fp.isNormal lit_50))
(define-fun lit_51 () (_ FloatingPoint 8 24) (fp.div RNE lit_50 lit_36))
(assert (fp.isNormal lit_51))
(define-fun lit_52 () (_ FloatingPoint 8 24) (fp.mul RNE lit_const_minus_1 lit_51))
(assert (fp.isNormal lit_52))
(define-fun lit_53 () (_ FloatingPoint 8 24) (fp.add RNE lit_9 lit_52))
(assert (fp.isNormal lit_53))
(define-fun const_0 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_54 () (_ FloatingPoint 8 24) (fp.add RNE lit_53 const_0))
(assert (fp.isNormal lit_54))
(define-fun lit_56 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.100000001490116119384765625000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_57 () Bool (fp.lt lit_54 lit_56))
(define-fun lit_58 () Bool (not lit_57))
(define-fun lit_59 () Bool (and lit_16 lit_58))
(define-fun const_1 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 1.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun const_2 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 2.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun prop_1 () Bool (fp.lt const_1 const_2))
(define-fun propexp () Bool (and lit_59 prop_1))
(assert propexp)
(apply fpa2bv_approx)
(check-sat)
;(get-model)
(exit)