(declare-fun lit_x0 () (_ FloatingPoint 8 24))
(assert (fp.isNormal lit_x0))
(declare-fun lit_x1 () (_ FloatingPoint 8 24))
(assert (fp.isNormal lit_x1))
(declare-fun lit_x2 () (_ FloatingPoint 8 24))
(assert (fp.isNormal lit_x2))
(declare-fun lit_x3 () (_ FloatingPoint 8 24))
(assert (fp.isNormal lit_x3))
(declare-fun lit_x4 () (_ FloatingPoint 8 24))
(assert (fp.isNormal lit_x4))
(define-fun lit_10 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 5.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_13 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 5.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun const_0 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_14 () (_ FloatingPoint 8 24) (fp.add RNE lit_x0 const_0))
(assert (fp.isNormal lit_14))
(define-fun lit_15 () Bool (fp.leq lit_13 lit_14))
(define-fun lit_16 () Bool (fp.leq lit_14 lit_10))
(define-fun lit_17 () Bool (and lit_15 lit_16))
(define-fun lit_18 () (_ FloatingPoint 8 24) (fp.add RNE lit_x1 const_0))
(assert (fp.isNormal lit_18))
(define-fun lit_19 () Bool (fp.leq lit_13 lit_18))
(define-fun lit_20 () Bool (fp.leq lit_18 lit_10))
(define-fun lit_21 () Bool (and lit_19 lit_20))
(define-fun lit_22 () (_ FloatingPoint 8 24) (fp.add RNE lit_x2 const_0))
(assert (fp.isNormal lit_22))
(define-fun lit_23 () Bool (fp.leq lit_13 lit_22))
(define-fun lit_24 () Bool (fp.leq lit_22 lit_10))
(define-fun lit_25 () Bool (and lit_23 lit_24))
(define-fun lit_26 () (_ FloatingPoint 8 24) (fp.add RNE lit_x3 const_0))
(assert (fp.isNormal lit_26))
(define-fun lit_27 () Bool (fp.leq lit_13 lit_26))
(define-fun lit_28 () Bool (fp.leq lit_26 lit_10))
(define-fun lit_29 () Bool (and lit_27 lit_28))
(define-fun lit_30 () (_ FloatingPoint 8 24) (fp.add RNE lit_x4 const_0))
(assert (fp.isNormal lit_30))
(define-fun lit_31 () Bool (fp.leq lit_13 lit_30))
(define-fun lit_32 () Bool (fp.leq lit_30 lit_10))
(define-fun lit_33 () Bool (and lit_31 lit_32))
(define-fun lit_12 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_39 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.037999998778104782104492187500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_41 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.907999992370605468750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_42 () (_ FloatingPoint 8 24) (fp.mul RNE lit_14 lit_41))
(assert (fp.isNormal lit_42))
(define-fun lit_43 () (_ FloatingPoint 8 24) (fp.add RNE lit_12 lit_42))
(assert (fp.isNormal lit_43))
(define-fun lit_45 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.779999971389770507812500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_46 () (_ FloatingPoint 8 24) (fp.mul RNE lit_18 lit_45))
(assert (fp.isNormal lit_46))
(define-fun lit_47 () (_ FloatingPoint 8 24) (fp.add RNE lit_43 lit_46))
(assert (fp.isNormal lit_47))
(define-fun lit_49 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.726999998092651367187500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_50 () (_ FloatingPoint 8 24) (fp.mul RNE lit_22 lit_49))
(assert (fp.isNormal lit_50))
(define-fun lit_51 () (_ FloatingPoint 8 24) (fp.add RNE lit_47 lit_50))
(assert (fp.isNormal lit_51))
(define-fun lit_53 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.785000026226043701171875000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_54 () (_ FloatingPoint 8 24) (fp.mul RNE lit_26 lit_53))
(assert (fp.isNormal lit_54))
(define-fun lit_55 () (_ FloatingPoint 8 24) (fp.add RNE lit_51 lit_54))
(assert (fp.isNormal lit_55))
(define-fun lit_57 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.778999984264373779296875000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_58 () (_ FloatingPoint 8 24) (fp.mul RNE lit_30 lit_57))
(assert (fp.isNormal lit_58))
(define-fun lit_59 () (_ FloatingPoint 8 24) (fp.add RNE lit_55 lit_58))
(assert (fp.isNormal lit_59))
(define-fun lit_60 () Bool (fp.leq lit_59 lit_39))
(define-fun lit_62 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.973999977111816406250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_64 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.560999989509582519531250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_65 () (_ FloatingPoint 8 24) (fp.mul RNE lit_14 lit_64))
(assert (fp.isNormal lit_65))
(define-fun lit_66 () (_ FloatingPoint 8 24) (fp.add RNE lit_12 lit_65))
(assert (fp.isNormal lit_66))
(define-fun lit_69 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.456999987363815307617187500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_70 () (_ FloatingPoint 8 24) (fp.mul RNE lit_18 lit_69))
(assert (fp.isNormal lit_70))
(define-fun lit_71 () (_ FloatingPoint 8 24) (fp.add RNE lit_66 lit_70))
(assert (fp.isNormal lit_71))
(define-fun lit_73 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.876999974250793457031250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_74 () (_ FloatingPoint 8 24) (fp.mul RNE lit_22 lit_73))
(assert (fp.isNormal lit_74))
(define-fun lit_75 () (_ FloatingPoint 8 24) (fp.add RNE lit_71 lit_74))
(assert (fp.isNormal lit_75))
(define-fun lit_78 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.192000001668930053710937500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_79 () (_ FloatingPoint 8 24) (fp.mul RNE lit_26 lit_78))
(assert (fp.isNormal lit_79))
(define-fun lit_80 () (_ FloatingPoint 8 24) (fp.add RNE lit_75 lit_79))
(assert (fp.isNormal lit_80))
(define-fun lit_82 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.128999993205070495605468750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_83 () (_ FloatingPoint 8 24) (fp.mul RNE lit_30 lit_82))
(assert (fp.isNormal lit_83))
(define-fun lit_84 () (_ FloatingPoint 8 24) (fp.add RNE lit_80 lit_83))
(assert (fp.isNormal lit_84))
(define-fun lit_85 () Bool (fp.leq lit_84 lit_62))
(define-fun lit_87 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.065999999642372131347656250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_89 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.698000013828277587890625000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_90 () (_ FloatingPoint 8 24) (fp.mul RNE lit_14 lit_89))
(assert (fp.isNormal lit_90))
(define-fun lit_91 () (_ FloatingPoint 8 24) (fp.add RNE lit_12 lit_90))
(assert (fp.isNormal lit_91))
(define-fun lit_93 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.368999987840652465820312500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_94 () (_ FloatingPoint 8 24) (fp.mul RNE lit_18 lit_93))
(assert (fp.isNormal lit_94))
(define-fun lit_95 () (_ FloatingPoint 8 24) (fp.add RNE lit_91 lit_94))
(assert (fp.isNormal lit_95))
(define-fun lit_97 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.541999995708465576171875000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_98 () (_ FloatingPoint 8 24) (fp.mul RNE lit_22 lit_97))
(assert (fp.isNormal lit_98))
(define-fun lit_99 () (_ FloatingPoint 8 24) (fp.add RNE lit_95 lit_98))
(assert (fp.isNormal lit_99))
(define-fun lit_101 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.939999997615814208984375000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_102 () (_ FloatingPoint 8 24) (fp.mul RNE lit_26 lit_101))
(assert (fp.isNormal lit_102))
(define-fun lit_103 () (_ FloatingPoint 8 24) (fp.add RNE lit_99 lit_102))
(assert (fp.isNormal lit_103))
(define-fun lit_106 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.833000004291534423828125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_107 () (_ FloatingPoint 8 24) (fp.mul RNE lit_30 lit_106))
(assert (fp.isNormal lit_107))
(define-fun lit_108 () (_ FloatingPoint 8 24) (fp.add RNE lit_103 lit_107))
(assert (fp.isNormal lit_108))
(define-fun lit_109 () Bool (fp.leq lit_108 lit_87))
(define-fun lit_111 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.712000012397766113281250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_113 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.143999993801116943359375000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_114 () (_ FloatingPoint 8 24) (fp.mul RNE lit_14 lit_113))
(assert (fp.isNormal lit_114))
(define-fun lit_115 () (_ FloatingPoint 8 24) (fp.add RNE lit_12 lit_114))
(assert (fp.isNormal lit_115))
(define-fun lit_118 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.474999994039535522460937500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_119 () (_ FloatingPoint 8 24) (fp.mul RNE lit_18 lit_118))
(assert (fp.isNormal lit_119))
(define-fun lit_120 () (_ FloatingPoint 8 24) (fp.add RNE lit_115 lit_119))
(assert (fp.isNormal lit_120))
(define-fun lit_121 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.939999997615814208984375000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_122 () (_ FloatingPoint 8 24) (fp.mul RNE lit_22 lit_121))
(assert (fp.isNormal lit_122))
(define-fun lit_123 () (_ FloatingPoint 8 24) (fp.add RNE lit_120 lit_122))
(assert (fp.isNormal lit_123))
(define-fun lit_125 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.887000024318695068359375000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_126 () (_ FloatingPoint 8 24) (fp.mul RNE lit_26 lit_125))
(assert (fp.isNormal lit_126))
(define-fun lit_127 () (_ FloatingPoint 8 24) (fp.add RNE lit_123 lit_126))
(assert (fp.isNormal lit_127))
(define-fun lit_130 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.196999996900558471679687500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_131 () (_ FloatingPoint 8 24) (fp.mul RNE lit_30 lit_130))
(assert (fp.isNormal lit_131))
(define-fun lit_132 () (_ FloatingPoint 8 24) (fp.add RNE lit_127 lit_131))
(assert (fp.isNormal lit_132))
(define-fun lit_133 () Bool (fp.leq lit_132 lit_111))
(define-fun lit_136 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.129999995231628417968750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_139 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.518000006675720214843750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_140 () (_ FloatingPoint 8 24) (fp.mul RNE lit_14 lit_139))
(assert (fp.isNormal lit_140))
(define-fun lit_141 () (_ FloatingPoint 8 24) (fp.add RNE lit_12 lit_140))
(assert (fp.isNormal lit_141))
(define-fun lit_143 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.444999992847442626953125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_144 () (_ FloatingPoint 8 24) (fp.mul RNE lit_18 lit_143))
(assert (fp.isNormal lit_144))
(define-fun lit_145 () (_ FloatingPoint 8 24) (fp.add RNE lit_141 lit_144))
(assert (fp.isNormal lit_145))
(define-fun lit_148 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.273000001907348632812500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_149 () (_ FloatingPoint 8 24) (fp.mul RNE lit_22 lit_148))
(assert (fp.isNormal lit_149))
(define-fun lit_150 () (_ FloatingPoint 8 24) (fp.add RNE lit_145 lit_149))
(assert (fp.isNormal lit_150))
(define-fun lit_152 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.388000011444091796875000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_153 () (_ FloatingPoint 8 24) (fp.mul RNE lit_26 lit_152))
(assert (fp.isNormal lit_153))
(define-fun lit_154 () (_ FloatingPoint 8 24) (fp.add RNE lit_150 lit_153))
(assert (fp.isNormal lit_154))
(define-fun lit_156 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.920000016689300537109375000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_157 () (_ FloatingPoint 8 24) (fp.mul RNE lit_30 lit_156))
(assert (fp.isNormal lit_157))
(define-fun lit_158 () (_ FloatingPoint 8 24) (fp.add RNE lit_154 lit_157))
(assert (fp.isNormal lit_158))
(define-fun lit_159 () Bool (fp.leq lit_158 lit_136))
(define-fun lit_162 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.287000000476837158203125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_165 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.652000010013580322265625000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_166 () (_ FloatingPoint 8 24) (fp.mul RNE lit_14 lit_165))
(assert (fp.isNormal lit_166))
(define-fun lit_167 () (_ FloatingPoint 8 24) (fp.add RNE lit_12 lit_166))
(assert (fp.isNormal lit_167))
(define-fun lit_169 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.867999970912933349609375000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_170 () (_ FloatingPoint 8 24) (fp.mul RNE lit_18 lit_169))
(assert (fp.isNormal lit_170))
(define-fun lit_171 () (_ FloatingPoint 8 24) (fp.add RNE lit_167 lit_170))
(assert (fp.isNormal lit_171))
(define-fun lit_174 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.930999994277954101562500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_175 () (_ FloatingPoint 8 24) (fp.mul RNE lit_22 lit_174))
(assert (fp.isNormal lit_175))
(define-fun lit_176 () (_ FloatingPoint 8 24) (fp.add RNE lit_171 lit_175))
(assert (fp.isNormal lit_176))
(define-fun lit_179 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.751999974250793457031250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_180 () (_ FloatingPoint 8 24) (fp.mul RNE lit_26 lit_179))
(assert (fp.isNormal lit_180))
(define-fun lit_181 () (_ FloatingPoint 8 24) (fp.add RNE lit_176 lit_180))
(assert (fp.isNormal lit_181))
(define-fun lit_184 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.204999998211860656738281250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_185 () (_ FloatingPoint 8 24) (fp.mul RNE lit_30 lit_184))
(assert (fp.isNormal lit_185))
(define-fun lit_186 () (_ FloatingPoint 8 24) (fp.add RNE lit_181 lit_185))
(assert (fp.isNormal lit_186))
(define-fun lit_187 () Bool (fp.leq lit_186 lit_162))
(define-fun lit_190 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.075999997556209564208984375000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_191 () (_ FloatingPoint 8 24) (fp.mul RNE lit_14 lit_190))
(assert (fp.isNormal lit_191))
(define-fun lit_192 () (_ FloatingPoint 8 24) (fp.add RNE lit_12 lit_191))
(assert (fp.isNormal lit_192))
(define-fun lit_195 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.064999997615814208984375000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_196 () (_ FloatingPoint 8 24) (fp.mul RNE lit_18 lit_195))
(assert (fp.isNormal lit_196))
(define-fun lit_197 () (_ FloatingPoint 8 24) (fp.add RNE lit_192 lit_196))
(assert (fp.isNormal lit_197))
(define-fun lit_199 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.104000002145767211914062500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_200 () (_ FloatingPoint 8 24) (fp.mul RNE lit_22 lit_199))
(assert (fp.isNormal lit_200))
(define-fun lit_201 () (_ FloatingPoint 8 24) (fp.add RNE lit_197 lit_200))
(assert (fp.isNormal lit_201))
(define-fun lit_203 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.467000007629394531250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_204 () (_ FloatingPoint 8 24) (fp.mul RNE lit_26 lit_203))
(assert (fp.isNormal lit_204))
(define-fun lit_205 () (_ FloatingPoint 8 24) (fp.add RNE lit_201 lit_204))
(assert (fp.isNormal lit_205))
(define-fun lit_206 () (_ FloatingPoint 8 24) (fp.mul RNE lit_12 lit_30))
(assert (fp.isNormal lit_206))
(define-fun lit_207 () (_ FloatingPoint 8 24) (fp.add RNE lit_205 lit_206))
(assert (fp.isNormal lit_207))
(define-fun lit_208 () Bool (fp.leq lit_207 lit_82))
(define-fun lit_211 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.112000003457069396972656250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_212 () (_ FloatingPoint 8 24) (fp.mul RNE lit_14 lit_211))
(assert (fp.isNormal lit_212))
(define-fun lit_213 () (_ FloatingPoint 8 24) (fp.add RNE lit_12 lit_212))
(assert (fp.isNormal lit_213))
(define-fun lit_216 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.217999994754791259765625000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_217 () (_ FloatingPoint 8 24) (fp.mul RNE lit_18 lit_216))
(assert (fp.isNormal lit_217))
(define-fun lit_218 () (_ FloatingPoint 8 24) (fp.add RNE lit_213 lit_217))
(assert (fp.isNormal lit_218))
(define-fun lit_220 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.083999998867511749267578125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_221 () (_ FloatingPoint 8 24) (fp.mul RNE lit_22 lit_220))
(assert (fp.isNormal lit_221))
(define-fun lit_222 () (_ FloatingPoint 8 24) (fp.add RNE lit_218 lit_221))
(assert (fp.isNormal lit_222))
(define-fun lit_224 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.745999991893768310546875000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_225 () (_ FloatingPoint 8 24) (fp.mul RNE lit_26 lit_224))
(assert (fp.isNormal lit_225))
(define-fun lit_226 () (_ FloatingPoint 8 24) (fp.add RNE lit_222 lit_225))
(assert (fp.isNormal lit_226))
(define-fun lit_228 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.749000012874603271484375000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_229 () (_ FloatingPoint 8 24) (fp.mul RNE lit_30 lit_228))
(assert (fp.isNormal lit_229))
(define-fun lit_230 () (_ FloatingPoint 8 24) (fp.add RNE lit_226 lit_229))
(assert (fp.isNormal lit_230))
(define-fun lit_231 () Bool (fp.leq lit_230 lit_199))
(define-fun lit_233 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.405000001192092895507812500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_235 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.529999971389770507812500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_236 () (_ FloatingPoint 8 24) (fp.mul RNE lit_14 lit_235))
(assert (fp.isNormal lit_236))
(define-fun lit_237 () (_ FloatingPoint 8 24) (fp.add RNE lit_12 lit_236))
(assert (fp.isNormal lit_237))
(define-fun lit_238 () (_ FloatingPoint 8 24) (fp.mul RNE lit_18 lit_82))
(assert (fp.isNormal lit_238))
(define-fun lit_239 () (_ FloatingPoint 8 24) (fp.add RNE lit_237 lit_238))
(assert (fp.isNormal lit_239))
(define-fun lit_241 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.423999994993209838867187500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_242 () (_ FloatingPoint 8 24) (fp.mul RNE lit_22 lit_241))
(assert (fp.isNormal lit_242))
(define-fun lit_243 () (_ FloatingPoint 8 24) (fp.add RNE lit_239 lit_242))
(assert (fp.isNormal lit_243))
(define-fun lit_245 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.252000004053115844726562500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_246 () (_ FloatingPoint 8 24) (fp.mul RNE lit_26 lit_245))
(assert (fp.isNormal lit_246))
(define-fun lit_247 () (_ FloatingPoint 8 24) (fp.add RNE lit_243 lit_246))
(assert (fp.isNormal lit_247))
(define-fun lit_249 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.685999989509582519531250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_250 () (_ FloatingPoint 8 24) (fp.mul RNE lit_30 lit_249))
(assert (fp.isNormal lit_250))
(define-fun lit_251 () (_ FloatingPoint 8 24) (fp.add RNE lit_247 lit_250))
(assert (fp.isNormal lit_251))
(define-fun lit_252 () Bool (fp.leq lit_251 lit_233))
(define-fun lit_255 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.123000003397464752197265625000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_256 () (_ FloatingPoint 8 24) (fp.mul RNE lit_14 lit_220))
(assert (fp.isNormal lit_256))
(define-fun lit_257 () (_ FloatingPoint 8 24) (fp.add RNE lit_12 lit_256))
(assert (fp.isNormal lit_257))
(define-fun lit_260 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.432000011205673217773437500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_261 () (_ FloatingPoint 8 24) (fp.mul RNE lit_18 lit_260))
(assert (fp.isNormal lit_261))
(define-fun lit_262 () (_ FloatingPoint 8 24) (fp.add RNE lit_257 lit_261))
(assert (fp.isNormal lit_262))
(define-fun lit_265 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.528999984264373779296875000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_266 () (_ FloatingPoint 8 24) (fp.mul RNE lit_22 lit_265))
(assert (fp.isNormal lit_266))
(define-fun lit_267 () (_ FloatingPoint 8 24) (fp.add RNE lit_262 lit_266))
(assert (fp.isNormal lit_267))
(define-fun lit_270 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 0.702000021934509277343750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_271 () (_ FloatingPoint 8 24) (fp.mul RNE lit_26 lit_270))
(assert (fp.isNormal lit_271))
(define-fun lit_272 () (_ FloatingPoint 8 24) (fp.add RNE lit_267 lit_271))
(assert (fp.isNormal lit_272))
(define-fun lit_274 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.349000006914138793945312500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_275 () (_ FloatingPoint 8 24) (fp.mul RNE lit_30 lit_274))
(assert (fp.isNormal lit_275))
(define-fun lit_276 () (_ FloatingPoint 8 24) (fp.add RNE lit_272 lit_275))
(assert (fp.isNormal lit_276))
(define-fun lit_277 () Bool (fp.leq lit_255 lit_276))
(define-fun top_level_new0 () Bool (and lit_277 lit_252))
(define-fun top_level_new1 () Bool (and top_level_new0 lit_187))
(define-fun top_level_new2 () Bool (and top_level_new1 lit_159))
(define-fun top_level_new3 () Bool (and top_level_new2 lit_85))
(define-fun top_level_new4 () Bool (and top_level_new3 lit_208))
(define-fun top_level_new5 () Bool (and top_level_new4 lit_25))
(define-fun top_level_new6 () Bool (and top_level_new5 lit_109))
(define-fun top_level_new7 () Bool (and top_level_new6 lit_33))
(define-fun top_level_new8 () Bool (and top_level_new7 lit_21))
(define-fun top_level_new9 () Bool (and top_level_new8 lit_17))
(define-fun top_level_new10 () Bool (and top_level_new9 lit_60))
(define-fun top_level_new11 () Bool (and top_level_new10 lit_231))
(define-fun top_level_new12 () Bool (and top_level_new11 lit_133))
(define-fun propexp () Bool (and top_level_new12 lit_29))
(assert propexp)
(apply fpa2bv_approx)
(check-sat)
;(get-model)
(exit)