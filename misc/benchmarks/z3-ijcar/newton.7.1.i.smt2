(declare-fun lit_9 () (_ FloatingPoint 8 24))
(assert (fp.isNormal lit_9))
(define-fun lit_11 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 1.200000047683715820312500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_12 () Bool (fp.lt lit_9 lit_11))
(define-fun lit_14 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 1.200000047683715820312500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_15 () Bool (fp.lt lit_14 lit_9))
(define-fun lit_16 () Bool (and lit_12 lit_15))
(define-fun lit_17 () (_ FloatingPoint 8 24) (fp.mul RNE lit_9 lit_9))
(assert (fp.isNormal lit_17))
(define-fun lit_19 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 2.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_20 () (_ FloatingPoint 8 24) (fp.div RNE lit_17 lit_19))
(assert (fp.isNormal lit_20))
(define-fun lit_const_minus_1 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 1.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_21 () (_ FloatingPoint 8 24) (fp.mul RNE lit_const_minus_1 lit_20))
(assert (fp.isNormal lit_21))
(define-fun lit_23 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 1.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_24 () (_ FloatingPoint 8 24) (fp.add RNE lit_21 lit_23))
(assert (fp.isNormal lit_24))
(define-fun lit_25 () (_ FloatingPoint 8 24) (fp.mul RNE lit_9 lit_17))
(assert (fp.isNormal lit_25))
(define-fun lit_26 () (_ FloatingPoint 8 24) (fp.mul RNE lit_9 lit_25))
(assert (fp.isNormal lit_26))
(define-fun lit_28 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 24.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_29 () (_ FloatingPoint 8 24) (fp.div RNE lit_26 lit_28))
(assert (fp.isNormal lit_29))
(define-fun lit_30 () (_ FloatingPoint 8 24) (fp.add RNE lit_24 lit_29))
(assert (fp.isNormal lit_30))
(define-fun lit_31 () (_ FloatingPoint 8 24) (fp.mul RNE lit_9 lit_26))
(assert (fp.isNormal lit_31))
(define-fun lit_32 () (_ FloatingPoint 8 24) (fp.mul RNE lit_9 lit_31))
(assert (fp.isNormal lit_32))
(define-fun lit_34 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 720.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_35 () (_ FloatingPoint 8 24) (fp.div RNE lit_32 lit_34))
(assert (fp.isNormal lit_35))
(define-fun lit_36 () (_ FloatingPoint 8 24) (fp.add RNE lit_30 lit_35))
(assert (fp.isNormal lit_36))
(define-fun lit_38 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 6.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_39 () (_ FloatingPoint 8 24) (fp.div RNE lit_25 lit_38))
(assert (fp.isNormal lit_39))
(define-fun lit_40 () (_ FloatingPoint 8 24) (fp.mul RNE lit_const_minus_1 lit_39))
(assert (fp.isNormal lit_40))
(define-fun lit_41 () (_ FloatingPoint 8 24) (fp.add RNE lit_9 lit_40))
(assert (fp.isNormal lit_41))
(define-fun lit_43 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 120.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_44 () (_ FloatingPoint 8 24) (fp.div RNE lit_31 lit_43))
(assert (fp.isNormal lit_44))
(define-fun lit_45 () (_ FloatingPoint 8 24) (fp.add RNE lit_41 lit_44))
(assert (fp.isNormal lit_45))
(define-fun lit_46 () (_ FloatingPoint 8 24) (fp.mul RNE lit_9 lit_32))
(assert (fp.isNormal lit_46))
(define-fun lit_48 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 5040.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_49 () (_ FloatingPoint 8 24) (fp.div RNE lit_46 lit_48))
(assert (fp.isNormal lit_49))
(define-fun lit_50 () (_ FloatingPoint 8 24) (fp.add RNE lit_45 lit_49))
(assert (fp.isNormal lit_50))
(define-fun lit_51 () (_ FloatingPoint 8 24) (fp.div RNE lit_50 lit_36))
(assert (fp.isNormal lit_51))
(define-fun lit_52 () (_ FloatingPoint 8 24) (fp.mul RNE lit_const_minus_1 lit_51))
(assert (fp.isNormal lit_52))
(define-fun lit_53 () (_ FloatingPoint 8 24) (fp.add RNE lit_9 lit_52))
(assert (fp.isNormal lit_53))
(define-fun lit_54 () (_ FloatingPoint 8 24) (fp.mul RNE lit_53 lit_53))
(assert (fp.isNormal lit_54))
(define-fun lit_55 () (_ FloatingPoint 8 24) (fp.div RNE lit_54 lit_19))
(assert (fp.isNormal lit_55))
(define-fun lit_56 () (_ FloatingPoint 8 24) (fp.mul RNE lit_const_minus_1 lit_55))
(assert (fp.isNormal lit_56))
(define-fun lit_57 () (_ FloatingPoint 8 24) (fp.add RNE lit_23 lit_56))
(assert (fp.isNormal lit_57))
(define-fun lit_58 () (_ FloatingPoint 8 24) (fp.mul RNE lit_53 lit_54))
(assert (fp.isNormal lit_58))
(define-fun lit_59 () (_ FloatingPoint 8 24) (fp.mul RNE lit_53 lit_58))
(assert (fp.isNormal lit_59))
(define-fun lit_60 () (_ FloatingPoint 8 24) (fp.div RNE lit_59 lit_28))
(assert (fp.isNormal lit_60))
(define-fun lit_61 () (_ FloatingPoint 8 24) (fp.add RNE lit_57 lit_60))
(assert (fp.isNormal lit_61))
(define-fun lit_62 () (_ FloatingPoint 8 24) (fp.mul RNE lit_53 lit_59))
(assert (fp.isNormal lit_62))
(define-fun lit_63 () (_ FloatingPoint 8 24) (fp.mul RNE lit_53 lit_62))
(assert (fp.isNormal lit_63))
(define-fun lit_64 () (_ FloatingPoint 8 24) (fp.div RNE lit_63 lit_34))
(assert (fp.isNormal lit_64))
(define-fun lit_65 () (_ FloatingPoint 8 24) (fp.add RNE lit_61 lit_64))
(assert (fp.isNormal lit_65))
(define-fun lit_66 () (_ FloatingPoint 8 24) (fp.div RNE lit_58 lit_38))
(assert (fp.isNormal lit_66))
(define-fun lit_67 () (_ FloatingPoint 8 24) (fp.mul RNE lit_const_minus_1 lit_66))
(assert (fp.isNormal lit_67))
(define-fun lit_68 () (_ FloatingPoint 8 24) (fp.add RNE lit_53 lit_67))
(assert (fp.isNormal lit_68))
(define-fun lit_69 () (_ FloatingPoint 8 24) (fp.div RNE lit_62 lit_43))
(assert (fp.isNormal lit_69))
(define-fun lit_70 () (_ FloatingPoint 8 24) (fp.add RNE lit_68 lit_69))
(assert (fp.isNormal lit_70))
(define-fun lit_71 () (_ FloatingPoint 8 24) (fp.mul RNE lit_53 lit_63))
(assert (fp.isNormal lit_71))
(define-fun lit_72 () (_ FloatingPoint 8 24) (fp.div RNE lit_71 lit_48))
(assert (fp.isNormal lit_72))
(define-fun lit_73 () (_ FloatingPoint 8 24) (fp.add RNE lit_70 lit_72))
(assert (fp.isNormal lit_73))
(define-fun lit_74 () (_ FloatingPoint 8 24) (fp.div RNE lit_73 lit_65))
(assert (fp.isNormal lit_74))
(define-fun lit_75 () (_ FloatingPoint 8 24) (fp.mul RNE lit_const_minus_1 lit_74))
(assert (fp.isNormal lit_75))
(define-fun lit_76 () (_ FloatingPoint 8 24) (fp.add RNE lit_53 lit_75))
(assert (fp.isNormal lit_76))
(define-fun lit_77 () (_ FloatingPoint 8 24) (fp.mul RNE lit_76 lit_76))
(assert (fp.isNormal lit_77))
(define-fun lit_78 () (_ FloatingPoint 8 24) (fp.div RNE lit_77 lit_19))
(assert (fp.isNormal lit_78))
(define-fun lit_79 () (_ FloatingPoint 8 24) (fp.mul RNE lit_const_minus_1 lit_78))
(assert (fp.isNormal lit_79))
(define-fun lit_80 () (_ FloatingPoint 8 24) (fp.add RNE lit_23 lit_79))
(assert (fp.isNormal lit_80))
(define-fun lit_81 () (_ FloatingPoint 8 24) (fp.mul RNE lit_76 lit_77))
(assert (fp.isNormal lit_81))
(define-fun lit_82 () (_ FloatingPoint 8 24) (fp.mul RNE lit_76 lit_81))
(assert (fp.isNormal lit_82))
(define-fun lit_83 () (_ FloatingPoint 8 24) (fp.div RNE lit_82 lit_28))
(assert (fp.isNormal lit_83))
(define-fun lit_84 () (_ FloatingPoint 8 24) (fp.add RNE lit_80 lit_83))
(assert (fp.isNormal lit_84))
(define-fun lit_85 () (_ FloatingPoint 8 24) (fp.mul RNE lit_76 lit_82))
(assert (fp.isNormal lit_85))
(define-fun lit_86 () (_ FloatingPoint 8 24) (fp.mul RNE lit_76 lit_85))
(assert (fp.isNormal lit_86))
(define-fun lit_87 () (_ FloatingPoint 8 24) (fp.div RNE lit_86 lit_34))
(assert (fp.isNormal lit_87))
(define-fun lit_88 () (_ FloatingPoint 8 24) (fp.add RNE lit_84 lit_87))
(assert (fp.isNormal lit_88))
(define-fun lit_89 () (_ FloatingPoint 8 24) (fp.div RNE lit_81 lit_38))
(assert (fp.isNormal lit_89))
(define-fun lit_90 () (_ FloatingPoint 8 24) (fp.mul RNE lit_const_minus_1 lit_89))
(assert (fp.isNormal lit_90))
(define-fun lit_91 () (_ FloatingPoint 8 24) (fp.add RNE lit_76 lit_90))
(assert (fp.isNormal lit_91))
(define-fun lit_92 () (_ FloatingPoint 8 24) (fp.div RNE lit_85 lit_43))
(assert (fp.isNormal lit_92))
(define-fun lit_93 () (_ FloatingPoint 8 24) (fp.add RNE lit_91 lit_92))
(assert (fp.isNormal lit_93))
(define-fun lit_94 () (_ FloatingPoint 8 24) (fp.mul RNE lit_76 lit_86))
(assert (fp.isNormal lit_94))
(define-fun lit_95 () (_ FloatingPoint 8 24) (fp.div RNE lit_94 lit_48))
(assert (fp.isNormal lit_95))
(define-fun lit_96 () (_ FloatingPoint 8 24) (fp.add RNE lit_93 lit_95))
(assert (fp.isNormal lit_96))
(define-fun lit_97 () (_ FloatingPoint 8 24) (fp.div RNE lit_96 lit_88))
(assert (fp.isNormal lit_97))
(define-fun lit_98 () (_ FloatingPoint 8 24) (fp.mul RNE lit_const_minus_1 lit_97))
(assert (fp.isNormal lit_98))
(define-fun lit_99 () (_ FloatingPoint 8 24) (fp.add RNE lit_76 lit_98))
(assert (fp.isNormal lit_99))
(define-fun const_0 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_100 () (_ FloatingPoint 8 24) (fp.add RNE lit_99 const_0))
(assert (fp.isNormal lit_100))
(define-fun lit_102 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.100000001490116119384765625000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_103 () Bool (fp.lt lit_100 lit_102))
(define-fun lit_104 () Bool (not lit_103))
(define-fun lit_105 () Bool (and lit_16 lit_104))
(define-fun const_1 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 1.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun const_2 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 2.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun prop_1 () Bool (fp.lt const_1 const_2))
(define-fun propexp () Bool (and lit_105 prop_1))
(assert propexp)
(apply fpa2bv_approx)
(check-sat)
;(get-model)
(exit)