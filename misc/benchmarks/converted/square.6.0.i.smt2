(declare-fun lit_9 () (_ FloatingPoint 8 24))
(assert (fp.isNormal lit_9))
(define-fun lit_11 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_12 () (_ FloatingPoint 8 24) (fp.mul RNE lit_9 lit_11))
(assert (fp.isNormal lit_12))
(define-fun lit_14 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 1.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_15 () (_ FloatingPoint 8 24) (fp.add RNE lit_12 lit_14))
(assert (fp.isNormal lit_15))
(define-fun lit_17 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_18 () (_ FloatingPoint 8 24) (fp.mul RNE lit_9 lit_17))
(assert (fp.isNormal lit_18))
(define-fun lit_19 () (_ FloatingPoint 8 24) (fp.mul RNE lit_9 lit_18))
(assert (fp.isNormal lit_19))
(define-fun lit_const_minus_1 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 1.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_20 () (_ FloatingPoint 8 24) (fp.mul RNE lit_const_minus_1 lit_19))
(assert (fp.isNormal lit_20))
(define-fun lit_21 () (_ FloatingPoint 8 24) (fp.add RNE lit_15 lit_20))
(assert (fp.isNormal lit_21))
(define-fun lit_23 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.062500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_24 () (_ FloatingPoint 8 24) (fp.mul RNE lit_9 lit_23))
(assert (fp.isNormal lit_24))
(define-fun lit_25 () (_ FloatingPoint 8 24) (fp.mul RNE lit_9 lit_24))
(assert (fp.isNormal lit_25))
(define-fun lit_26 () (_ FloatingPoint 8 24) (fp.mul RNE lit_9 lit_25))
(assert (fp.isNormal lit_26))
(define-fun lit_27 () (_ FloatingPoint 8 24) (fp.add RNE lit_21 lit_26))
(assert (fp.isNormal lit_27))
(define-fun lit_29 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.039062500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_30 () (_ FloatingPoint 8 24) (fp.mul RNE lit_9 lit_29))
(assert (fp.isNormal lit_30))
(define-fun lit_31 () (_ FloatingPoint 8 24) (fp.mul RNE lit_9 lit_30))
(assert (fp.isNormal lit_31))
(define-fun lit_32 () (_ FloatingPoint 8 24) (fp.mul RNE lit_9 lit_31))
(assert (fp.isNormal lit_32))
(define-fun lit_33 () (_ FloatingPoint 8 24) (fp.mul RNE lit_9 lit_32))
(assert (fp.isNormal lit_33))
(define-fun lit_34 () (_ FloatingPoint 8 24) (fp.mul RNE lit_const_minus_1 lit_33))
(assert (fp.isNormal lit_34))
(define-fun lit_35 () (_ FloatingPoint 8 24) (fp.add RNE lit_27 lit_34))
(assert (fp.isNormal lit_35))
(define-fun lit_37 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_38 () Bool (fp.leq lit_37 lit_35))
(define-fun lit_39 () Bool (not lit_38))
(define-fun lit_41 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 1.398429989814758300781250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_42 () Bool (fp.lt lit_35 lit_41))
(define-fun lit_43 () Bool (not lit_42))
(define-fun lit_44 () Bool (fp.lt lit_9 lit_14))
(define-fun lit_45 () Bool (fp.leq lit_37 lit_9))
(define-fun lit_46 () Bool (and lit_44 lit_45))
(define-fun lit_47 () Bool (and lit_43 lit_46))
(define-fun lit_48 () Bool (and lit_39 lit_47))
(define-fun const_1 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 1.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun const_2 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 2.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun prop_1 () Bool (fp.lt const_1 const_2))
(define-fun propexp () Bool (and lit_48 prop_1))
(assert propexp)
(check-sat)
;(get-model)
(exit)