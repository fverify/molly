(declare-fun lit_9 () (_ FloatingPoint 8 24))
(assert (fp.isNormal lit_9))
(define-fun lit_10 () (_ FloatingPoint 8 24) (fp.mul RNE lit_9 lit_9))
(assert (fp.isNormal lit_10))
(define-fun lit_11 () (_ FloatingPoint 8 24) (fp.mul RNE lit_9 lit_10))
(assert (fp.isNormal lit_11))
(define-fun lit_13 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 6.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_14 () (_ FloatingPoint 8 24) (fp.div RNE lit_11 lit_13))
(assert (fp.isNormal lit_14))
(define-fun lit_const_minus_1 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 1.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_15 () (_ FloatingPoint 8 24) (fp.mul RNE lit_const_minus_1 lit_14))
(assert (fp.isNormal lit_15))
(define-fun lit_16 () (_ FloatingPoint 8 24) (fp.add RNE lit_9 lit_15))
(assert (fp.isNormal lit_16))
(define-fun lit_17 () (_ FloatingPoint 8 24) (fp.mul RNE lit_9 lit_11))
(assert (fp.isNormal lit_17))
(define-fun lit_18 () (_ FloatingPoint 8 24) (fp.mul RNE lit_9 lit_17))
(assert (fp.isNormal lit_18))
(define-fun lit_20 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 120.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_21 () (_ FloatingPoint 8 24) (fp.div RNE lit_18 lit_20))
(assert (fp.isNormal lit_21))
(define-fun lit_22 () (_ FloatingPoint 8 24) (fp.add RNE lit_16 lit_21))
(assert (fp.isNormal lit_22))
(define-fun lit_23 () (_ FloatingPoint 8 24) (fp.mul RNE lit_9 lit_18))
(assert (fp.isNormal lit_23))
(define-fun lit_24 () (_ FloatingPoint 8 24) (fp.mul RNE lit_9 lit_23))
(assert (fp.isNormal lit_24))
(define-fun lit_26 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 5040.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_27 () (_ FloatingPoint 8 24) (fp.div RNE lit_24 lit_26))
(assert (fp.isNormal lit_27))
(define-fun lit_28 () (_ FloatingPoint 8 24) (fp.add RNE lit_22 lit_27))
(assert (fp.isNormal lit_28))
(define-fun lit_30 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 1.001000046730041503906250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_31 () Bool (fp.leq lit_30 lit_28))
(define-fun lit_32 () Bool (not lit_31))
(define-fun lit_34 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 1.001000046730041503906250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_35 () Bool (fp.leq lit_28 lit_34))
(define-fun lit_36 () Bool (not lit_35))
(define-fun lit_38 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 1.570796370506286621093750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun lit_39 () Bool (fp.lt lit_9 lit_38))
(define-fun lit_41 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN (- 1.570796370506286621093750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(define-fun lit_42 () Bool (fp.lt lit_41 lit_9))
(define-fun lit_43 () Bool (and lit_39 lit_42))
(define-fun lit_44 () Bool (and lit_36 lit_43))
(define-fun lit_45 () Bool (and lit_32 lit_44))
(define-fun const_1 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 1.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun const_2 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) RTN 2.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
(define-fun prop_1 () Bool (fp.lt const_1 const_2))
(define-fun propexp () Bool (and lit_45 prop_1))
(assert propexp)
(check-sat)
;(get-model)
(exit)